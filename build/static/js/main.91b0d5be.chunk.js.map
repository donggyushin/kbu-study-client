{"version":3,"sources":["constants/endpoint.tsx","components/global/dialog.tsx","components/private/table.tsx","components/private/main/exitTimeInput.tsx","components/private/main/excelDown.tsx","components/private/main/main.tsx","components/private/currentUserTable.tsx","components/private/post/post.tsx","utils/autologin.ts","components/private/aggregate/aggregateTable.tsx","components/private/aggregate/aggregateDetail.tsx","components/private/privateRoutes.tsx","components/private/aggregate/aggregate.tsx","components/public/login/login.tsx","components/public/publicRoutes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ADMIN_END_POINT","AlertDialog","title","message","callback","React","useState","open","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","autoFocus","useStyles","makeStyles","table","minWidth","SimpleTable","infos","noLabelTapped","classes","turnOnExitTimeInput","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","info","i","key","scope","access_id","user_name","user_univ_id","user_major","is_manual","access_datetime","admin_id","admin_dept","created_datetime","updated_datetime","ip_addr","disabled_aggregate","src","ExitTimeInput","exitTimeString","handleExitTimeString","turnOfExitTimeInput","wrapperRef","useRef","ref","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideAlerter","onChange","value","type","repeat","ExcelDown","datas","turnOffExcelDownView","data","filename","fields","style","padding","CurrentUserTable","accessTime","now","Date","date","diffTime","Math","abs","getTime","diffDays","ceil","theme","createStyles","formControl","margin","spacing","selectEmpty","marginTop","Main","setInfos","currentUsers","setCurrentUsers","searchedInfos","setSearchedInfos","searching","setSearching","dialogTitle","setDialogTitle","dialogMessage","setDialogMessage","dialog","setDialog","noDesc","setNoDesc","exitTimeInput","setExitTimeInput","setExitTimeString","excelDownView","setExcelDownView","selectedFromDate","setSelectedFromDate","selectedToDate","setSelectedToDate","category","setCategory","localStorage","getItem","pw","axios","post","then","res","status","setItem","token","headers","authorization","date1","date2","date_from","getFullYear","getMonth","getDate","date_to","get","Authorization","todayUsers","reverse","currentUsersIds","user_univ_ids","length","user","includes","push","count","user_id","todayUser","console","log","catch","err","getTodaysCurrentUsers","fetchInfosFunction","getElementById","readOnly","alert","error","logoutPressed","clearInterval","to","textDecoration","utils","DateFnsUtils","Grid","container","justify","disableToolbar","variant","format","label","KeyboardButtonProps","TextField","filter","FormControl","InputLabel","Select","labelId","MenuItem","numberLabelTapped","e","dateFrom","dateTo","fetchInfos","setInterval","text","compareNumber","a","b","compareNumber2","sortedInfos","sort","removeItem","window","location","href","Post","name","setName","sid","setSid","major","setMajor","selectedDate","setSelectedDate","handleDateChange","test","toString","autoLogin","AggregateTable","aggregates","selectAggregate","row","univ_id","total_seconds","detail","from","AggregateDetail","aggregate","deselectAggregate","seconds","Aggregate","fromDate","setFromDate","toDate","setToDate","setAggregates","selectedAggregate","setSelectedAggregate","fetchAggregate","undefined","n","App","exact","path","LoginPage","Cryptr","setId","password","setPassword","fullWidth","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91b0d5be.chunk.js","sourcesContent":["export const END_POINT = \"http://13.125.144.97:9766/\"\nexport const ADMIN_END_POINT = \"https://api.kbucard.com:9766/\"","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface IProps {\n    title: string\n    message: string\n    callback: () => void\n}\n\nconst AlertDialog: React.FC<IProps> = ({\n    title,\n    message,\n    callback\n}) => {\n    const [open, setOpen] = React.useState(true);\n\n\n    // const handleClose = () => {\n    //     setOpen(false);\n    // };\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                onClose={callback}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={callback} color=\"primary\" autoFocus>\n                        네\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default AlertDialog","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport './tableStyle.scss'\nimport { Info } from '../../constants/types';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\n\ninterface IProps {\n    infos: Info[]\n    noLabelTapped: () => void\n    turnOnExitTimeInput: (text: string) => void\n}\n\nconst SimpleTable: React.FC<IProps> = ({ infos, noLabelTapped, turnOnExitTimeInput }) => {\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell onClick={noLabelTapped}>no</TableCell>\n                        <TableCell onClick={noLabelTapped} align=\"right\">이름</TableCell>\n                        <TableCell align=\"right\">학번</TableCell>\n                        <TableCell align=\"right\">전공</TableCell>\n                        <TableCell align=\"right\">자동/수동</TableCell>\n                        <TableCell align=\"right\">접근 시각</TableCell>\n                        <TableCell align=\"right\">인증 관리자</TableCell>\n                        <TableCell align=\"right\">관리자 부서</TableCell>\n                        <TableCell align=\"right\">데이터 생성시각</TableCell>\n                        <TableCell align=\"right\">데이터 업데이트시각</TableCell>\n                        <TableCell align=\"right\">인증 ip</TableCell>\n                        <TableCell align=\"right\">집계 제외</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {infos.map((info, i) => (\n                        <TableRow key={i}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {info.access_id}\n                            </TableCell>\n                            <TableCell align=\"right\">{info.user_name}</TableCell>\n                            <TableCell align=\"right\">{info.user_univ_id}</TableCell>\n                            <TableCell align=\"right\">{info.user_major}</TableCell>\n                            <TableCell align=\"right\">{info.is_manual ? <span className=\"table__red_text\">수동</span> : <span>자동</span>}</TableCell>\n                            <TableCell align=\"right\">{info.access_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.admin_id}</TableCell>\n                            <TableCell align=\"right\">{info.admin_dept}</TableCell>\n                            <TableCell align=\"right\">{info.created_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.updated_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.ip_addr}</TableCell>\n                            <TableCell align=\"right\">{info.disabled_aggregate ? <img className=\"checked_mark\" src=\"/checked.png\" /> : \"\"}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default SimpleTable","import React, { useRef, useEffect } from 'react'\n\ninterface IProps {\n    exitTimeString: string\n    handleExitTimeString: (event: React.ChangeEvent<HTMLInputElement>) => void\n    turnOfExitTimeInput: () => void\n}\n\nfunction useOutsideAlerter(ref: any, turnOfExitTimeInput: () => void) {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            turnOfExitTimeInput()\n        }\n    }\n\n    useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    });\n}\n\n\nconst ExitTimeInput: React.FC<IProps> = ({\n    exitTimeString,\n    handleExitTimeString,\n    turnOfExitTimeInput\n}) => {\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, turnOfExitTimeInput);\n\n    return <div className=\"exittimeinput_container\">\n        <div ref={wrapperRef}>\n            <input onChange={handleExitTimeString} value={exitTimeString} type=\"text\" />\n            <button >변경</button>\n        </div>\n    </div>\n}\n\nexport default ExitTimeInput","import React, { useRef, useEffect } from 'react'\nimport { Info } from '../../../constants/types'\n//@ts-ignore\nimport { JsonToExcel } from 'react-json-excel';\n\ninterface IProps {\n    datas: Info[]\n    turnOffExcelDownView: () => void\n}\n\nfunction useOutsideAlerter(ref: any, turnOffExcelDownView: () => void) {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            turnOffExcelDownView()\n        }\n    }\n\n    useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    });\n}\n\n\nconst ExcelDown: React.FC<IProps> = ({\n    datas,\n    turnOffExcelDownView\n}) => {\n\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, turnOffExcelDownView);\n\n    const className = 'class-name-for-style',\n        filename = 'Excel-file',\n        fields = {\n            \"access_id\": \"No\",\n            \"access_datetime\": \"접근 시각\",\n            \"created_datetime\": \"데이터 생성시각\",\n            \"updated_datetime\": \"데이터 업데이트시각\",\n            \"disabled_aggregate\": \"집계 제외\",\n            \"user_name\": \"이름\",\n            \"user_univ_id\": \"학번\",\n            \"admin_id\": \"인증 관리자\",\n            \"admin_dept\": \"관리자 부서\",\n            \"is_manual\": \"자동/수동\",\n            \"ip_addr\": \"인증 ip\"\n        },\n        style = {\n            padding: \"5px\"\n        }\n\n    return <div className=\"excel_down_container\">\n        <div ref={wrapperRef} className=\"card\">\n            <JsonToExcel\n                data={datas}\n                className={className}\n                filename={filename}\n                fields={fields}\n                style={style}\n            />\n        </div>\n\n    </div>\n}\n\nexport default ExcelDown","import 'date-fns';\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\nimport { Info } from '../../../constants/types'\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from '../../../constants/endpoint'\nimport { TextField } from '@material-ui/core'\nimport AlertDialog from '../../global/dialog'\nimport SimpleTable from '../table'\nimport ExitTimeInput from './exitTimeInput'\nimport ExcelDown from './excelDown'\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport CurrentUserTable from '../currentUserTable';\n\nvar repeat: any\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\nconst Main = () => {\n\n\n    // 여기서 infos 는 사용자 데이터라고 생각하면 됨\n    const [infos, setInfos] = useState<Info[]>([])\n    // 사용자 데이터를 받아올때마다 현재 사용자들만 따로 분류해놓은 데이터가 필요함\n    const [currentUsers, setCurrentUsers] = useState<Info[]>([])\n    const [searchedInfos, setSearchedInfos] = useState<Info[]>([])\n    const [searching, setSearching] = useState(false)\n    const [dialogTitle, setDialogTitle] = useState(\"\")\n    const [dialogMessage, setDialogMessage] = useState(\"\")\n    const [dialog, setDialog] = useState(false)\n    const [noDesc, setNoDesc] = useState(true)\n    const [exitTimeInput, setExitTimeInput] = useState(false)\n    const [exitTimeString, setExitTimeString] = useState(\"\")\n    const [excelDownView, setExcelDownView] = useState(false)\n    const [selectedFromDate, setSelectedFromDate] = React.useState<Date | null>(\n        new Date(),\n    );\n    const [selectedToDate, setSelectedToDate] = useState<Date | null>(new Date())\n    const classes = useStyles();\n    const [category, setCategory] = React.useState('');\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCategory(event.target.value as string);\n    };\n\n\n    useEffect(() => {\n\n        const id = localStorage.getItem(\"i\")\n        const pw = localStorage.getItem(\"p\")\n\n        if (id && pw) {\n            axios.post(`${ADMIN_END_POINT}auth/admin-login`, {\n                id,\n                pw\n            })\n                .then(res => {\n\n\n                    if (res.status === 200) {\n\n                        localStorage.setItem(\"i\", id)\n                        localStorage.setItem(\"p\", pw)\n\n                        const token = res.headers.authorization\n\n                        if (token) {\n                            localStorage.setItem(\"token\", token)\n                            getTodaysCurrentUsers()\n\n                            if (selectedToDate && selectedFromDate) {\n                                fetchInfosFunction(selectedFromDate, selectedToDate)\n                            }\n\n                            makeDateInputElementInvalid()\n                        } else {\n                            alert(\"잘못된 계정 정보\")\n                        }\n\n\n                    }\n                })\n                .catch(err => {\n                    console.error(err)\n                    alert(err)\n                })\n        } else {\n            // 로그아웃 시켜주기?\n            logoutPressed()\n        }\n\n        return function cleanup() {\n            clearInterval(repeat)\n        }\n    }, [])\n\n\n\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <div className=\"button active\">\n                조회\n            </div>\n            <Link to=\"/aggregate\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    집계\n            </div>\n            </Link>\n            <Link to=\"/post\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    추가\n            </div>\n            </Link>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"toolbars_container\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid className=\"grid\" container justify=\"space-around\">\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"검색 시작일\"\n                        value={selectedFromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"검색 마지막일\"\n                        value={selectedToDate}\n                        onChange={handleToDateChangee}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <TextField id=\"standard-basic\" className=\"standard-basic\" label=\"검색\" variant=\"standard\" onChange={textFieldHandler} />\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-label\">검색조건</InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={category}\n                            onChange={handleChange}\n                        >\n                            <MenuItem value={\"user_name\"}>이름</MenuItem>\n                            <MenuItem value={\"user_univ_id\"}>학번</MenuItem>\n                            <MenuItem value={\"user_major\"}>전공</MenuItem>\n                            <MenuItem value={\"admin_id\"}>인증 관리자</MenuItem>\n                            <MenuItem value={\"admin_dept\"}>관리자 부서</MenuItem>\n                            <MenuItem value={\"ip_addr\"}>인증 ip</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n            </MuiPickersUtilsProvider>\n        </div>\n        <div className=\"view_container_container\">\n            <div className=\"view__container\">\n                <div className=\"label\">\n                    현재 사용자\n                    </div>\n                <CurrentUserTable turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={currentUsers} />\n            </div>\n        </div>\n        <div className=\"view_container_container\">\n            <div className=\"view__container\">\n                <div className=\"label\">\n                    전체 사용자\n                </div>\n                {searching ? <SimpleTable turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={searchedInfos} /> : <SimpleTable turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={infos} />}\n\n\n                {dialog && <AlertDialog title={dialogTitle} message={dialogMessage} callback={closeAlertAndLogout} />}\n            </div>\n\n        </div>\n        <button onClick={excelDownButtonTapped} className=\"excel_down_button\">\n            엑셀다운\n        </button>\n        {(excelDownView && searching) && <ExcelDown turnOffExcelDownView={turnOffExcelDownView} datas={searchedInfos} />}\n        {(excelDownView && !searching) && <ExcelDown turnOffExcelDownView={turnOffExcelDownView} datas={infos} />}\n\n        {exitTimeInput && <ExitTimeInput\n            turnOfExitTimeInput={turnOfExitTimeInput}\n            handleExitTimeString={handleExitTimeString} exitTimeString={exitTimeString} />}\n    </div>\n\n    function fetchInfosFunction(dateFrom: Date, dateTo: Date) {\n\n        fetchInfos(dateFrom, dateTo)\n        repeat = setInterval(function () { fetchInfos(dateFrom, dateTo) }, 3000);\n    }\n\n    function makeDateInputElementInvalid() {\n        const input = document.getElementById(\"date-picker-inline\") as HTMLInputElement\n        input.readOnly = true;\n    }\n\n    function handleToDateChangee(date: Date | null) {\n        clearInterval(repeat)\n        setSelectedToDate(date)\n        if (selectedFromDate && date) {\n            fetchInfosFunction(selectedFromDate, date)\n        }\n\n    }\n\n    function handleFromDateChange(date: Date | null) {\n        clearInterval(repeat)\n        setSelectedFromDate(date)\n        if (date && selectedToDate) {\n            fetchInfosFunction(date, selectedToDate)\n        }\n\n    }\n\n    function turnOffExcelDownView() {\n        setExcelDownView(false)\n    }\n\n    function excelDownButtonTapped() {\n        setExcelDownView(true)\n    }\n\n    function turnOfExitTimeInput() {\n        setExitTimeInput(false)\n    }\n\n    function handleExitTimeString(e: React.ChangeEvent<HTMLInputElement>) {\n        setExitTimeString(e.target.value)\n    }\n\n    function turnOnExitTimeInput(text: string) {\n        setExitTimeInput(true)\n        setExitTimeString(text)\n    }\n\n    function compareNumber(a: Info, b: Info) {\n        if (a.access_id < b.access_id) {\n            return -1;\n        }\n        if (a.access_id > b.access_id) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function compareNumber2(a: Info, b: Info) {\n        if (a.access_id < b.access_id) {\n            return 1;\n        }\n        if (a.access_id > b.access_id) {\n            return -1;\n        }\n        return 0;\n    }\n\n    function numberLabelTapped() {\n        const sortedInfos = noDesc ? infos.sort(compareNumber2) : infos.sort(compareNumber)\n        setNoDesc(!noDesc)\n        setSearchedInfos(sortedInfos)\n    }\n\n    function closeAlertAndLogout() {\n        setDialog(false)\n        logoutPressed()\n    }\n\n    function textFieldHandler(event: React.ChangeEvent<HTMLInputElement>) {\n        const value = event.target.value\n\n        let searchedInfos = []\n\n\n\n        switch (category) {\n            case \"user_name\":\n\n                searchedInfos = infos.filter((info) => {\n                    if (info.user_name.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"user_univ_id\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.user_univ_id.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"user_major\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.user_major.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"admin_id\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.admin_id.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"admin_dept\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.admin_dept.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"ip_addr\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.ip_addr.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            default:\n                setSearching(false)\n                searchedInfos = infos\n                break;\n        }\n\n        setSearchedInfos(searchedInfos)\n        setSearching(true)\n        return\n    }\n\n    function getTodaysCurrentUsers() {\n\n        const date1 = new Date('')\n        const date2 = new Date('')\n\n        const date_from = `${date1.getFullYear()}-${date1.getMonth() + 1}-${date1.getDate()}`\n        const date_to = `${date2.getFullYear()}-${date2.getMonth() + 1}-${date2.getDate()}`\n\n        axios.get(`${ADMIN_END_POINT}msc/log?date_from=${date_from}&date_to=${date_to}`, {\n            headers: {\n                Authorization: localStorage.getItem(\"token\")\n            }\n        }).then(res => {\n            if (res.status === 200) {\n                let todayUsers = res.data.data.data as Info[]\n                todayUsers = todayUsers.reverse()\n                let currentUsersIds: String[] = []\n                let currentUsers: Info[] = []\n\n                // 중복없이 유저들의 학번을 담고 있는 데이터셋을 만들자. \n                let user_univ_ids: String[] = []\n                for (let i = 0; i < todayUsers.length; i++) {\n                    const user = todayUsers[i];\n                    if (user_univ_ids.includes(user.user_univ_id) == false) {\n                        user_univ_ids.push(user.user_univ_id)\n                    }\n                }\n\n\n                // 각각의 학번들마다 todayUsers에 면번 포함되어있는지를 카운트해준다. \n                for (let i = 0; i < user_univ_ids.length; i++) {\n                    const user_univ_id = user_univ_ids[i];\n                    let count = 0\n                    todayUsers.map((user) => {\n                        if (user.user_univ_id == user_univ_id) {\n                            count++\n                        }\n                    })\n\n                    // 만약에 count가 홀수개라면 현재 사용중인 유저의 id이다. \n                    if (count % 2 == 1) {\n                        currentUsersIds.push(user_univ_id)\n                    }\n                }\n\n\n                // 해당 id 값을 가진 유저들을 가장 최근 데이터만 한번씩만 골라낸다. \n                for (let i = 0; i < currentUsersIds.length; i++) {\n                    const user_id = currentUsersIds[i];\n                    for (let i = 0; i < todayUsers.length; i++) {\n                        const todayUser = todayUsers[i];\n                        if (todayUser.user_univ_id == user_id) {\n                            currentUsers.push(todayUser)\n                            break;\n                        }\n                    }\n                }\n\n                // 현재 사용중인 유저들\n                setCurrentUsers(currentUsers)\n\n            } else {\n                console.log(res)\n                setDialogTitle(\"성서봇입니다\")\n                setDialogMessage(\"에러 발생 부분 처리중\")\n                setDialog(true)\n            }\n        }).catch(err => {\n            console.log(err)\n            setDialogTitle(\"성서봇입니다\")\n            setDialogMessage(\"에러 발생 부분 처리중\")\n            setDialog(true)\n        })\n\n    }\n\n    function fetchInfos(dateFrom: Date, dateTo: Date) {\n\n        const date_from = `${dateFrom.getFullYear()}-${dateFrom.getMonth() + 1}-${dateFrom.getDate()}`\n        const date_to = `${dateTo.getFullYear()}-${dateTo.getMonth() + 1}-${dateTo.getDate()}`\n\n        axios.get(`${ADMIN_END_POINT}msc/log?date_from=${date_from}&date_to=${date_to}`, {\n            headers: {\n                Authorization: localStorage.getItem(\"token\")\n            }\n        })\n            .then(res => {\n                if (res.status === 200) {\n                    const infos = res.data.data.data as Info[]\n                    infos.sort(compareNumber2)\n                    setInfos(infos)\n                } else {\n                    setDialogTitle(\"성서봇입니다\")\n                    setDialogMessage(\"에러 발생 부분 처리중\")\n                    setDialog(true)\n                }\n            })\n            .catch(err => {\n                console.error(err)\n                setDialogTitle(\"성서봇입니다\")\n                setDialogMessage(\"에러 발생 부분 처리중\")\n                setDialog(true)\n            })\n    }\n\n\n\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Main","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport './tableStyle.scss'\nimport { Info } from '../../constants/types';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\n\ninterface IProps {\n    infos: Info[]\n    noLabelTapped: () => void\n    turnOnExitTimeInput: (text: string) => void\n}\n\nconst CurrentUserTable: React.FC<IProps> = ({ infos, noLabelTapped, turnOnExitTimeInput }) => {\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell onClick={noLabelTapped}>no</TableCell>\n                        <TableCell onClick={noLabelTapped} align=\"right\">이름</TableCell>\n                        <TableCell align=\"right\">학번</TableCell>\n                        <TableCell align=\"right\">전공</TableCell>\n                        <TableCell align=\"right\">자동/수동</TableCell>\n                        <TableCell align=\"right\">접근 시각</TableCell>\n                        <TableCell align=\"right\">인증 관리자</TableCell>\n                        <TableCell align=\"right\">인증 경과시간</TableCell>\n                        <TableCell align=\"right\">관리자 부서</TableCell>\n                        {/* <TableCell align=\"right\">데이터 생성시각</TableCell>\n                        <TableCell align=\"right\">데이터 업데이트시각</TableCell> */}\n                        <TableCell align=\"right\">인증 ip</TableCell>\n                        <TableCell align=\"right\">집계 제외</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {infos.map((info, i) => (\n                        <TableRow key={i}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {info.access_id}\n                            </TableCell>\n                            <TableCell align=\"right\">{info.user_name}</TableCell>\n                            <TableCell align=\"right\">{info.user_univ_id}</TableCell>\n                            <TableCell align=\"right\">{info.user_major}</TableCell>\n                            <TableCell align=\"right\">{info.is_manual ? <span className=\"table__red_text\">수동</span> : <span>자동</span>}</TableCell>\n                            <TableCell align=\"right\">{info.access_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.admin_id}</TableCell>\n                            <TableCell align=\"right\">{\n                                getTime(info.access_datetime)\n\n                            }</TableCell>\n                            <TableCell align=\"right\">{info.admin_dept}</TableCell>\n                            {/* <TableCell align=\"right\">{info.created_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.updated_datetime}</TableCell> */}\n                            <TableCell align=\"right\">{info.ip_addr}</TableCell>\n                            <TableCell align=\"right\">{info.disabled_aggregate ? <img className=\"checked_mark\" src=\"/checked.png\" /> : \"\"}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n\n\n    function getTime(accessTime: string) {\n        const now = new Date()\n        const date = new Date(accessTime)\n        const diffTime = Math.abs(now.getTime() - date.getTime())\n        const diffDays = Math.ceil(diffTime / (1000 * 60))\n\n        return `${diffDays}분`\n    }\n}\n\nexport default CurrentUserTable","import 'date-fns';\nimport React, { useState } from 'react'\nimport './styles.scss'\nimport { Link } from 'react-router-dom'\nimport { TextField, Button } from '@material-ui/core'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from '../../../constants/endpoint';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\n\nconst Post = () => {\n\n    const classes = useStyles();\n\n    const [name, setName] = useState(\"\")\n    const [sid, setSid] = useState(\"\")\n    const [major, setMajor] = React.useState(\"\");\n    const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n        new Date(),\n    );\n\n    const handleMajorChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setMajor(event.target.value as string);\n    };\n\n    const handleDateChange = (date: Date | null) => {\n        setSelectedDate(date);\n    };\n\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <Link to=\"/\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    조회\n            </div>\n            </Link>\n            <Link to=\"/aggregate\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    집계\n            </div>\n            </Link>\n            <div className=\"button active\">\n                추가\n            </div>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"post__container\">\n            <div className=\"post__form\">\n                <TextField value={name} onChange={handleName} id=\"standard-basic\" label=\"이름\" />\n                <TextField value={sid} onChange={handleSid} id=\"standard-basic\" label=\"학번\" />\n                <FormControl className={classes.formControl}>\n                    <InputLabel id=\"demo-simple-select-label\">학과</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        className=\"select\"\n                        value={major}\n                        onChange={handleMajorChange}\n                    >\n                        <MenuItem value={'컴퓨터소프트웨어학과'}>컴퓨터소프트웨어학과</MenuItem>\n                        <MenuItem value={'영유아보육학과'}>영유아보육학과</MenuItem>\n                        <MenuItem value={'사회복지학과'}>사회복지학과</MenuItem>\n                        <MenuItem value={'신학과'}>신학과</MenuItem>\n                        <MenuItem value={'간호학과'}>간호학과</MenuItem>\n                    </Select>\n                </FormControl>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <Grid container justify=\"center\">\n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"\n                            format=\"MM/dd/yyyy\"\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            label=\"Date picker inline\"\n                            value={selectedDate}\n                            onChange={handleDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                        <KeyboardTimePicker\n                            margin=\"normal\"\n                            id=\"time-picker\"\n                            label=\"Time picker\"\n                            value={selectedDate}\n                            onChange={handleDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change time',\n                            }}\n                        />\n                    </Grid>\n                </MuiPickersUtilsProvider>\n                <Button onClick={submitButtonTapped} variant=\"contained\" color=\"primary\">\n                    제출\n                </Button>\n            </div>\n        </div>\n    </div>\n\n    function handleSid(e: React.ChangeEvent<HTMLInputElement>) {\n        setSid(e.target.value)\n    }\n\n    function handleName(e: React.ChangeEvent<HTMLInputElement>) {\n        setName(e.target.value)\n    }\n\n    function submitButtonTapped() {\n\n        const pattern = /20[12]\\d0\\d{4}/i\n        const sidCheck = pattern.test(sid)\n        if (sidCheck === false) {\n            alert(\"학번을 제대로 기입해주세요\")\n            return\n        }\n        if (major === \"\") {\n            alert(\"학과를 제대로 기입해주세요\")\n            return\n        }\n\n        const token = localStorage.getItem(\"token\")\n\n        console.log(selectedDate?.toString())\n\n        axios.post(`${ADMIN_END_POINT}msc/log`, {\n            user_name: name,\n            user_univ_id: sid,\n            user_major: major,\n            access_datetime: selectedDate?.toString()\n        }, {\n            headers: {\n                Authorization: token\n            }\n        })\n            .then(res => {\n                console.log(res)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Post","import axios from 'axios'\nimport { ADMIN_END_POINT } from '../constants/endpoint'\n\nexport default function autoLogin() {\n\n    // 필요한가?\n    const id = localStorage.getItem(\"i\")\n    const pw = localStorage.getItem(\"p\")\n\n    if (id && pw) {\n        axios.post(`${ADMIN_END_POINT}auth/admin-login`, {\n            id,\n            pw\n        })\n            .then(res => {\n\n\n                if (res.status === 200) {\n\n                    localStorage.setItem(\"i\", id)\n                    localStorage.setItem(\"p\", pw)\n\n                    const token = res.headers.authorization\n\n                    if (token) {\n                        localStorage.setItem(\"token\", token)\n                        // window.location.href = \"/\"\n                    } else {\n                        alert(\"잘못된 계정 정보\")\n                    }\n\n\n                }\n            })\n            .catch(err => {\n                console.error(err)\n                alert(err)\n            })\n    }\n\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { IAggregate } from '../../../constants/types';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\ninterface IProps {\n    aggregates: IAggregate[]\n    selectAggregate: (aggregate: IAggregate) => void\n}\n\nconst AggregateTable: React.FC<IProps> = ({\n    aggregates,\n    selectAggregate\n}) => {\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>번호</TableCell>\n                        <TableCell align=\"right\">학번</TableCell>\n                        <TableCell align=\"right\">총 집계 시간</TableCell>\n                        <TableCell align=\"right\">시작</TableCell>\n                        <TableCell align=\"right\">종료</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {aggregates.map((row, i) => (\n\n                        <TableRow onClick={() => {\n                            selectAggregate(aggregates[i])\n                        }} key={i}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {i + 1}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.univ_id}</TableCell>\n                            <TableCell align=\"right\">{row.value.total_seconds}</TableCell>\n                            <TableCell align=\"right\">{row.value.detail[0].from}</TableCell>\n                            <TableCell align=\"right\">{row.value.detail[row.value.detail.length - 1].to}</TableCell>\n                        </TableRow>\n\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default AggregateTable","import React, { useEffect, useRef } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { IAggregate } from '../../../constants/types';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\ninterface IProps {\n    aggregate: IAggregate\n    deselectAggregate: () => void\n}\n\nfunction useOutsideAlerter(ref: any, deselectAggregate: () => void) {\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event: any) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                deselectAggregate()\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref]);\n}\n\nconst AggregateDetail: React.FC<IProps> = ({\n    aggregate,\n    deselectAggregate\n}) => {\n\n    const classes = useStyles();\n\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, deselectAggregate);\n\n    return <div className={\"aggregate_detail_container\"}>\n        <div className=\"container\" ref={wrapperRef}>\n            <div className=\"top\" >\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>번호</TableCell>\n                                <TableCell align=\"right\">학번</TableCell>\n                                <TableCell align=\"right\">총 집계 시간</TableCell>\n                                <TableCell align=\"right\">시작</TableCell>\n                                <TableCell align=\"right\">종료</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <TableRow key={aggregate.univ_id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {aggregate.univ_id}\n                                </TableCell>\n\n                                <TableCell align=\"right\">{aggregate.value.total_seconds}</TableCell>\n                                <TableCell align=\"right\">{aggregate.value.detail[0].from}</TableCell>\n                                <TableCell align=\"right\">{aggregate.value.detail[aggregate.value.detail.length - 1].to}</TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n            <div className=\"bottom\" >\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>번호</TableCell>\n                                <TableCell align=\"right\">학번</TableCell>\n                                <TableCell align=\"right\">입실</TableCell>\n                                <TableCell align=\"right\">퇴실</TableCell>\n                                <TableCell align=\"right\">집계 시간</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {aggregate.value.detail.map((data, i) => {\n                                return <TableRow key={aggregate.univ_id}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {i + 1}\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        {aggregate.univ_id}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{data.from}</TableCell>\n                                    <TableCell align=\"right\">{data.to}</TableCell>\n                                    <TableCell align=\"right\">{data.seconds}</TableCell>\n                                </TableRow>\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n\n        </div>\n\n    </div>\n}\n\nexport default AggregateDetail","import React, { useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Main from './main/main'\nimport Post from './post/post'\nimport autoLogin from '../../utils/autologin';\nimport Aggregate from './aggregate/aggregate';\n\nvar repeat: any\n\nexport default function App() {\n\n    useEffect(() => {\n        autoLogin()\n        repeat = setInterval(() => {\n            autoLogin()\n        }, 1000 * 60 * 10)\n\n        return function cleanup() {\n            clearInterval(repeat)\n        }\n    }, [])\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Main />\n                </Route>\n                <Route path=\"/post\" >\n                    <Post />\n                </Route>\n                <Route path=\"/aggregate\">\n                    <Aggregate />\n                </Route>\n                <Route>\n                    <Main />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n\n}","import 'date-fns';\nimport React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from '../../../constants/endpoint';\nimport { Info } from '../../../constants/types';\nimport { IAggregate } from '../../../constants/types'\nimport AggregateTable from './aggregateTable';\nimport AggregateDetail from './aggregateDetail';\n\nconst Aggregate: React.FC = () => {\n\n    const [fromDate, setFromDate] = React.useState<Date | null>(\n        new Date(),\n    );\n\n    const [toDate, setToDate] = React.useState<Date | null>(new Date())\n    const [aggregates, setAggregates] = useState<IAggregate[]>([])\n    const [selectedAggregate, setSelectedAggregate] = useState<IAggregate>()\n\n    const handleDateChange = (date: Date | null) => {\n        setFromDate(date);\n        if (date && toDate) {\n            fetchAggregate(date, toDate)\n        }\n    };\n\n    const handleToDateChange = (date: Date | null) => {\n        setToDate(date);\n        if (date && fromDate) {\n            fetchAggregate(fromDate, date)\n        }\n    };\n\n    useEffect(() => {\n        if (fromDate && toDate) {\n            fetchAggregate(fromDate, toDate)\n        }\n    }, [])\n\n    return <div className=\"aggregate__container\">\n        <div className=\"navigation__bar\">\n            <Link to=\"/\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    조회\n            </div>\n            </Link>\n            <div className=\"button active\">\n                집계\n            </div>\n\n            <Link to=\"/post\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    추가\n            </div>\n            </Link>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"date_picker_Container\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Date picker inline\"\n                        value={fromDate}\n                        onChange={handleDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Date picker inline\"\n                        value={toDate}\n                        onChange={handleToDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n\n                </Grid>\n            </MuiPickersUtilsProvider>\n        </div>\n        <div className=\"aggregate_table_container\">\n            <AggregateTable selectAggregate={selectAggregate} aggregates={aggregates} />\n        </div>\n        {selectedAggregate && <AggregateDetail deselectAggregate={deselectAggregate} aggregate={selectedAggregate} />}\n\n    </div>\n\n    function deselectAggregate() {\n        setSelectedAggregate(undefined)\n    }\n\n    function selectAggregate(aggregate: IAggregate) {\n        setSelectedAggregate(aggregate)\n    }\n\n    function fetchAggregate(fromDate: Date, toDate: Date) {\n\n        console.log(\"fetch aggregate\")\n\n        const date_from = `${fromDate.getFullYear()}-${fromDate.getMonth() + 1}-${fromDate.getDate()}`\n        const date_to = `${toDate.getFullYear()}-${toDate.getMonth() + 1}-${toDate.getDate()}`\n\n        axios.get(`${ADMIN_END_POINT}msc/log?date_from=${date_from}&date_to=${date_to}`, {\n            headers: {\n                Authorization: localStorage.getItem(\"token\")\n            }\n        })\n            .then(res => {\n                if (res.status === 200) {\n                    const infos = res.data.data.data as Info[]\n                    axios.post(`${ADMIN_END_POINT}msc/aggregate`, {\n                        data: infos\n                    })\n                        .then(res => {\n                            const data = res.data.data\n                            let aggregates: IAggregate[] = []\n                            for (var n in data) {\n\n                                const aggregate: IAggregate = {\n                                    univ_id: n,\n                                    value: data[n]\n                                }\n\n                                aggregates.push(aggregate)\n\n                            }\n                            setAggregates(aggregates)\n                        })\n                        .catch(err => {\n                            console.log(err)\n                        })\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n\n    }\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Aggregate","import React, { useState } from 'react'\nimport './styles.scss'\nimport { TextField, Button } from '@material-ui/core'\nimport axios from 'axios'\nimport { END_POINT, ADMIN_END_POINT } from '../../../constants/endpoint'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\nconst LoginPage = () => {\n\n    const [id, setId] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    return <div className=\"public__login__container\">\n        <div className=\"height__200\"></div>\n        <div className=\"login_form_container\">\n            <TextField onChange={idHandler} fullWidth value={id} label=\"아이디\" />\n            <TextField onChange={passwordHandler} fullWidth value={password} type=\"password\" label=\"패스워드\" />\n            <Button onClick={loginPressed} className=\"button\" variant=\"contained\" color=\"primary\">\n                로그인\n            </Button>\n        </div>\n    </div>\n\n    function idHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setId(value)\n    }\n\n    function passwordHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setPassword(value)\n    }\n\n    function loginPressed() {\n\n\n        axios.post(`${ADMIN_END_POINT}auth/admin-login`, {\n            id,\n            pw: password\n        })\n            .then(res => {\n\n\n                if (res.status === 200) {\n\n                    localStorage.setItem(\"i\", id)\n                    localStorage.setItem(\"p\", password)\n\n                    const token = res.headers.authorization\n\n                    if (token) {\n                        localStorage.setItem(\"token\", token)\n                        window.location.href = \"/\"\n                    } else {\n                        alert(\"잘못된 계정 정보\")\n                    }\n\n\n                }\n            })\n            .catch(err => {\n                console.error(err)\n                alert(err)\n            })\n    }\n}\n\nexport default LoginPage","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Login from './login/login'\n\n\nexport default function App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n                <Route>\n                    <Login />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n}","import React from 'react';\nimport Private from './components/private/privateRoutes'\nimport Public from './components/public/publicRoutes'\n\nfunction App() {\n\n  const token = localStorage.getItem('token')\n\n  if (token) {\n    return <Private />\n  } else {\n    return <Public />\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}