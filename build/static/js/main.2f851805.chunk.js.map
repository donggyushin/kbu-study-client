{"version":3,"sources":["components/global/dialog.tsx","components/private/table.tsx","components/private/main/exitTimeInput.tsx","components/private/main/excelDown.tsx","components/private/main/main.tsx","constants/endpoint.tsx","components/private/post/post.tsx","components/private/privateRoutes.tsx","components/public/login/login.tsx","components/public/publicRoutes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AlertDialog","title","message","callback","React","useState","open","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","autoFocus","useStyles","makeStyles","table","minWidth","SimpleTable","infos","noLabelTapped","classes","turnOnExitTimeInput","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","info","i","key","scope","access_id","user_name","user_univ_id","user_major","is_manual","access_datetime","admin_id","admin_dept","created_datetime","updated_datetime","ip_addr","disabled_aggregate","src","ExitTimeInput","exitTimeString","handleExitTimeString","turnOfExitTimeInput","wrapperRef","useRef","ref","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideAlerter","onChange","value","type","repeat","ExcelDown","datas","turnOffExcelDownView","data","filename","fields","style","padding","theme","createStyles","formControl","margin","spacing","selectEmpty","marginTop","Main","setInfos","currentUsers","setCurrentUsers","searchedInfos","setSearchedInfos","searching","setSearching","dialogTitle","setDialogTitle","dialogMessage","setDialogMessage","dialog","setDialog","noDesc","setNoDesc","exitTimeInput","setExitTimeInput","setExitTimeString","excelDownView","setExcelDownView","Date","selectedFromDate","setSelectedFromDate","selectedToDate","setSelectedToDate","category","setCategory","date1","date2","date_from","getFullYear","getMonth","getDate","date_to","axios","get","headers","Authorization","localStorage","getItem","then","res","status","todayUsers","reverse","currentUsersIds","user_univ_ids","length","user","includes","push","count","user_id","todayUser","console","log","catch","err","getTodaysCurrentUsers","fetchInfosFunction","getElementById","readOnly","clearInterval","to","textDecoration","logoutPressed","utils","DateFnsUtils","Grid","container","justify","disableToolbar","variant","format","label","date","KeyboardButtonProps","TextField","filter","FormControl","InputLabel","Select","labelId","MenuItem","numberLabelTapped","e","dateFrom","dateTo","fetchInfos","setInterval","text","compareNumber","a","b","compareNumber2","sortedInfos","sort","error","removeItem","window","location","href","Post","Cryptr","App","exact","path","LoginPage","setId","password","setPassword","fullWidth","post","pw","setItem","token","authorization","alert","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f851805.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface IProps {\n    title: string\n    message: string\n    callback: () => void\n}\n\nconst AlertDialog: React.FC<IProps> = ({\n    title,\n    message,\n    callback\n}) => {\n    const [open, setOpen] = React.useState(true);\n\n\n    // const handleClose = () => {\n    //     setOpen(false);\n    // };\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                onClose={callback}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={callback} color=\"primary\" autoFocus>\n                        네\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default AlertDialog","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport './tableStyle.scss'\nimport { Info } from '../../constants/types';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\n\ninterface IProps {\n    infos: Info[]\n    noLabelTapped: () => void\n    turnOnExitTimeInput: (text: string) => void\n}\n\nconst SimpleTable: React.FC<IProps> = ({ infos, noLabelTapped, turnOnExitTimeInput }) => {\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell onClick={noLabelTapped}>no</TableCell>\n                        <TableCell onClick={noLabelTapped} align=\"right\">이름</TableCell>\n                        <TableCell align=\"right\">학번</TableCell>\n                        <TableCell align=\"right\">전공</TableCell>\n                        <TableCell align=\"right\">자동/수동</TableCell>\n                        <TableCell align=\"right\">접근 시각</TableCell>\n                        <TableCell align=\"right\">인증 관리자</TableCell>\n                        <TableCell align=\"right\">관리자 부서</TableCell>\n                        <TableCell align=\"right\">데이터 생성시각</TableCell>\n                        <TableCell align=\"right\">데이터 업데이트시각</TableCell>\n                        <TableCell align=\"right\">인증 ip</TableCell>\n                        <TableCell align=\"right\">집계 제외</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {infos.map((info, i) => (\n                        <TableRow key={i}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {info.access_id}\n                            </TableCell>\n                            <TableCell align=\"right\">{info.user_name}</TableCell>\n                            <TableCell align=\"right\">{info.user_univ_id}</TableCell>\n                            <TableCell align=\"right\">{info.user_major}</TableCell>\n                            <TableCell align=\"right\">{info.is_manual ? <span className=\"table__red_text\">수동</span> : <span>자동</span>}</TableCell>\n                            <TableCell align=\"right\">{info.access_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.admin_id}</TableCell>\n                            <TableCell align=\"right\">{info.admin_dept}</TableCell>\n                            <TableCell align=\"right\">{info.created_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.updated_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.ip_addr}</TableCell>\n                            <TableCell align=\"right\">{info.disabled_aggregate ? <img className=\"checked_mark\" src=\"/checked.png\" /> : \"\"}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default SimpleTable","import React, { useRef, useEffect } from 'react'\n\ninterface IProps {\n    exitTimeString: string\n    handleExitTimeString: (event: React.ChangeEvent<HTMLInputElement>) => void\n    turnOfExitTimeInput: () => void\n}\n\nfunction useOutsideAlerter(ref: any, turnOfExitTimeInput: () => void) {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            turnOfExitTimeInput()\n        }\n    }\n\n    useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    });\n}\n\n\nconst ExitTimeInput: React.FC<IProps> = ({\n    exitTimeString,\n    handleExitTimeString,\n    turnOfExitTimeInput\n}) => {\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, turnOfExitTimeInput);\n\n    return <div className=\"exittimeinput_container\">\n        <div ref={wrapperRef}>\n            <input onChange={handleExitTimeString} value={exitTimeString} type=\"text\" />\n            <button >변경</button>\n        </div>\n    </div>\n}\n\nexport default ExitTimeInput","import React, { useRef, useEffect } from 'react'\nimport { Info } from '../../../constants/types'\n//@ts-ignore\nimport { JsonToExcel } from 'react-json-excel';\n\ninterface IProps {\n    datas: Info[]\n    turnOffExcelDownView: () => void\n}\n\nfunction useOutsideAlerter(ref: any, turnOffExcelDownView: () => void) {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            turnOffExcelDownView()\n        }\n    }\n\n    useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    });\n}\n\n\nconst ExcelDown: React.FC<IProps> = ({\n    datas,\n    turnOffExcelDownView\n}) => {\n\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, turnOffExcelDownView);\n\n    const className = 'class-name-for-style',\n        filename = 'Excel-file',\n        fields = {\n            \"access_id\": \"No\",\n            \"access_datetime\": \"접근 시각\",\n            \"created_datetime\": \"데이터 생성시각\",\n            \"updated_datetime\": \"데이터 업데이트시각\",\n            \"disabled_aggregate\": \"집계 제외\",\n            \"user_name\": \"이름\",\n            \"user_univ_id\": \"학번\",\n            \"admin_id\": \"인증 관리자\",\n            \"admin_dept\": \"관리자 부서\",\n            \"is_manual\": \"자동/수동\",\n            \"ip_addr\": \"인증 ip\"\n        },\n        style = {\n            padding: \"5px\"\n        }\n\n    return <div className=\"excel_down_container\">\n        <div ref={wrapperRef} className=\"card\">\n            <JsonToExcel\n                data={datas}\n                className={className}\n                filename={filename}\n                fields={fields}\n                style={style}\n            />\n        </div>\n\n    </div>\n}\n\nexport default ExcelDown","import 'date-fns';\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\nimport { Info } from '../../../constants/types'\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from '../../../constants/endpoint'\nimport { TextField } from '@material-ui/core'\nimport AlertDialog from '../../global/dialog'\nimport SimpleTable from '../table'\nimport ExitTimeInput from './exitTimeInput'\nimport ExcelDown from './excelDown'\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nvar repeat: any\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\nconst Main = () => {\n\n\n    // 여기서 infos 는 사용자 데이터라고 생각하면 됨\n    const [infos, setInfos] = useState<Info[]>([])\n    // 사용자 데이터를 받아올때마다 현재 사용자들만 따로 분류해놓은 데이터가 필요함\n    const [currentUsers, setCurrentUsers] = useState<Info[]>([])\n    const [searchedInfos, setSearchedInfos] = useState<Info[]>([])\n    const [searching, setSearching] = useState(false)\n    const [dialogTitle, setDialogTitle] = useState(\"\")\n    const [dialogMessage, setDialogMessage] = useState(\"\")\n    const [dialog, setDialog] = useState(false)\n    const [noDesc, setNoDesc] = useState(true)\n    const [exitTimeInput, setExitTimeInput] = useState(false)\n    const [exitTimeString, setExitTimeString] = useState(\"\")\n    const [excelDownView, setExcelDownView] = useState(false)\n    const [selectedFromDate, setSelectedFromDate] = React.useState<Date | null>(\n        new Date(),\n    );\n    const [selectedToDate, setSelectedToDate] = useState<Date | null>(new Date())\n    const classes = useStyles();\n    const [category, setCategory] = React.useState('');\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCategory(event.target.value as string);\n    };\n\n\n    useEffect(() => {\n\n        getTodaysCurrentUsers()\n\n        if (selectedToDate && selectedFromDate) {\n            fetchInfosFunction(selectedFromDate, selectedToDate)\n        }\n\n        makeDateInputElementInvalid()\n\n\n\n        return function cleanup() {\n            clearInterval(repeat)\n        }\n    }, [])\n\n\n\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <div className=\"button active\">\n                view\n            </div>\n            <Link to=\"/post\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    post\n            </div>\n            </Link>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"toolbars_container\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid className=\"grid\" container justify=\"space-around\">\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"검색 시작일\"\n                        value={selectedFromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"검색 마지막일\"\n                        value={selectedToDate}\n                        onChange={handleToDateChangee}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <TextField id=\"standard-basic\" className=\"standard-basic\" label=\"검색\" variant=\"standard\" onChange={textFieldHandler} />\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-label\">검색조건</InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={category}\n                            onChange={handleChange}\n                        >\n                            <MenuItem value={\"user_name\"}>이름</MenuItem>\n                            <MenuItem value={\"user_univ_id\"}>학번</MenuItem>\n                            <MenuItem value={\"user_major\"}>전공</MenuItem>\n                            <MenuItem value={\"admin_id\"}>인증 관리자</MenuItem>\n                            <MenuItem value={\"admin_dept\"}>관리자 부서</MenuItem>\n                            <MenuItem value={\"ip_addr\"}>인증 ip</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n            </MuiPickersUtilsProvider>\n        </div>\n        <div className=\"view_container_container\">\n            <div className=\"view__container\">\n                <div className=\"label\">\n                    현재 사용자\n                    </div>\n                <SimpleTable turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={currentUsers} />\n            </div>\n        </div>\n        <div className=\"view_container_container\">\n            <div className=\"view__container\">\n                <div className=\"label\">\n                    전체 사용자\n                </div>\n                {searching ? <SimpleTable turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={searchedInfos} /> : <SimpleTable turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={infos} />}\n\n\n                {dialog && <AlertDialog title={dialogTitle} message={dialogMessage} callback={closeAlertAndLogout} />}\n            </div>\n\n        </div>\n        <button onClick={excelDownButtonTapped} className=\"excel_down_button\">\n            엑셀다운\n        </button>\n        {(excelDownView && searching) && <ExcelDown turnOffExcelDownView={turnOffExcelDownView} datas={searchedInfos} />}\n        {(excelDownView && !searching) && <ExcelDown turnOffExcelDownView={turnOffExcelDownView} datas={infos} />}\n\n        {exitTimeInput && <ExitTimeInput\n            turnOfExitTimeInput={turnOfExitTimeInput}\n            handleExitTimeString={handleExitTimeString} exitTimeString={exitTimeString} />}\n    </div>\n\n    function fetchInfosFunction(dateFrom: Date, dateTo: Date) {\n\n        fetchInfos(dateFrom, dateTo)\n        repeat = setInterval(function () { fetchInfos(dateFrom, dateTo) }, 3000);\n    }\n\n    function makeDateInputElementInvalid() {\n        const input = document.getElementById(\"date-picker-inline\") as HTMLInputElement\n        input.readOnly = true;\n    }\n\n    function handleToDateChangee(date: Date | null) {\n        clearInterval(repeat)\n        setSelectedToDate(date)\n        if (selectedFromDate && date) {\n            fetchInfosFunction(selectedFromDate, date)\n        }\n\n    }\n\n    function handleFromDateChange(date: Date | null) {\n        clearInterval(repeat)\n        setSelectedFromDate(date)\n        if (date && selectedToDate) {\n            fetchInfosFunction(date, selectedToDate)\n        }\n\n    }\n\n    function turnOffExcelDownView() {\n        setExcelDownView(false)\n    }\n\n    function excelDownButtonTapped() {\n        setExcelDownView(true)\n    }\n\n    function turnOfExitTimeInput() {\n        setExitTimeInput(false)\n    }\n\n    function handleExitTimeString(e: React.ChangeEvent<HTMLInputElement>) {\n        setExitTimeString(e.target.value)\n    }\n\n    function turnOnExitTimeInput(text: string) {\n        setExitTimeInput(true)\n        setExitTimeString(text)\n    }\n\n    function compareNumber(a: Info, b: Info) {\n        if (a.access_id < b.access_id) {\n            return -1;\n        }\n        if (a.access_id > b.access_id) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function compareNumber2(a: Info, b: Info) {\n        if (a.access_id < b.access_id) {\n            return 1;\n        }\n        if (a.access_id > b.access_id) {\n            return -1;\n        }\n        return 0;\n    }\n\n    function numberLabelTapped() {\n        const sortedInfos = noDesc ? infos.sort(compareNumber2) : infos.sort(compareNumber)\n        setNoDesc(!noDesc)\n        setSearchedInfos(sortedInfos)\n    }\n\n    function closeAlertAndLogout() {\n        setDialog(false)\n        logoutPressed()\n    }\n\n    function textFieldHandler(event: React.ChangeEvent<HTMLInputElement>) {\n        const value = event.target.value\n\n        let searchedInfos = []\n\n\n\n        switch (category) {\n            case \"user_name\":\n\n                searchedInfos = infos.filter((info) => {\n                    if (info.user_name.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"user_univ_id\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.user_univ_id.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"user_major\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.user_major.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"admin_id\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.admin_id.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"admin_dept\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.admin_dept.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"ip_addr\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.ip_addr.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            default:\n                setSearching(false)\n                searchedInfos = infos\n                break;\n        }\n\n        setSearchedInfos(searchedInfos)\n        setSearching(true)\n        return\n    }\n\n    function getTodaysCurrentUsers() {\n        const date1 = new Date()\n        const date2 = new Date()\n\n        const date_from = `${date1.getFullYear()}-${date1.getMonth() + 1}-${date1.getDate()}`\n        const date_to = `${date2.getFullYear()}-${date2.getMonth() + 1}-${date2.getDate()}`\n\n        axios.get(`${ADMIN_END_POINT}msc/log?date_from=${date_from}&date_to=${date_to}`, {\n            headers: {\n                Authorization: localStorage.getItem(\"token\")\n            }\n        }).then(res => {\n            if (res.status === 200) {\n                let todayUsers = res.data.data.data as Info[]\n                todayUsers = todayUsers.reverse()\n                let currentUsersIds: String[] = []\n                let currentUsers: Info[] = []\n\n                // 중복없이 유저들의 학번을 담고 있는 데이터셋을 만들자. \n                let user_univ_ids: String[] = []\n                for (let i = 0; i < todayUsers.length; i++) {\n                    const user = todayUsers[i];\n                    if (user_univ_ids.includes(user.user_univ_id) == false) {\n                        user_univ_ids.push(user.user_univ_id)\n                    }\n                }\n\n\n                // 각각의 학번들마다 todayUsers에 면번 포함되어있는지를 카운트해준다. \n                for (let i = 0; i < user_univ_ids.length; i++) {\n                    const user_univ_id = user_univ_ids[i];\n                    let count = 0\n                    todayUsers.map((user) => {\n                        if (user.user_univ_id == user_univ_id) {\n                            count++\n                        }\n                    })\n\n                    // 만약에 count가 홀수개라면 현재 사용중인 유저의 id이다. \n                    if (count % 2 == 1) {\n                        currentUsersIds.push(user_univ_id)\n                    }\n                }\n\n\n                // 해당 id 값을 가진 유저들을 가장 최근 데이터만 한번씩만 골라낸다. \n                for (let i = 0; i < currentUsersIds.length; i++) {\n                    const user_id = currentUsersIds[i];\n                    for (let i = 0; i < todayUsers.length; i++) {\n                        const todayUser = todayUsers[i];\n                        if (todayUser.user_univ_id == user_id) {\n                            currentUsers.push(todayUser)\n                            break;\n                        }\n                    }\n                }\n\n                // 현재 사용중인 유저들\n                setCurrentUsers(currentUsers)\n\n            } else {\n                console.log(res)\n                setDialogTitle(\"성서봇입니다\")\n                setDialogMessage(\"에러 발생 부분 처리중\")\n                setDialog(true)\n            }\n        }).catch(err => {\n            console.log(err)\n            setDialogTitle(\"성서봇입니다\")\n            setDialogMessage(\"에러 발생 부분 처리중\")\n            setDialog(true)\n        })\n\n    }\n\n    function fetchInfos(dateFrom: Date, dateTo: Date) {\n\n        const date_from = `${dateFrom.getFullYear()}-${dateFrom.getMonth() + 1}-${dateFrom.getDate()}`\n        const date_to = `${dateTo.getFullYear()}-${dateTo.getMonth() + 1}-${dateTo.getDate()}`\n\n        axios.get(`${ADMIN_END_POINT}msc/log?date_from=${date_from}&date_to=${date_to}`, {\n            headers: {\n                Authorization: localStorage.getItem(\"token\")\n            }\n        })\n            .then(res => {\n                if (res.status === 200) {\n                    const infos = res.data.data.data as Info[]\n                    infos.sort(compareNumber2)\n                    setInfos(infos)\n                } else {\n                    setDialogTitle(\"성서봇입니다\")\n                    setDialogMessage(\"에러 발생 부분 처리중\")\n                    setDialog(true)\n                }\n            })\n            .catch(err => {\n                console.error(err)\n                setDialogTitle(\"성서봇입니다\")\n                setDialogMessage(\"에러 발생 부분 처리중\")\n                setDialog(true)\n            })\n    }\n\n\n\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Main","export const END_POINT = \"http://13.125.144.97:9766/\"\nexport const ADMIN_END_POINT = \"https://api.kbucard.com:9766/\"","import React from 'react'\nimport './styles.scss'\nimport { Link } from 'react-router-dom'\nimport { TextField, Button } from '@material-ui/core'\nconst Post = () => {\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <Link to=\"/\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    view\n            </div>\n            </Link>\n            <div className=\"button active\">\n                post\n            </div>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"post__container\">\n            <div className=\"post__form\">\n                <TextField id=\"standard-basic\" label=\"이름\" />\n                <TextField id=\"standard-basic\" label=\"학번\" />\n                <TextField id=\"standard-basic\" label=\"전공\" />\n                <TextField id=\"standard-basic\" label=\"입실시간\" />\n                <TextField id=\"standard-basic\" label=\"퇴실시간\" />\n                <Button variant=\"contained\" color=\"primary\">\n                    제출\n</Button>\n            </div>\n        </div>\n    </div>\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Post","import React, { useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Main from './main/main'\nimport axios from 'axios'\nimport { END_POINT } from '../../constants/endpoint';\nimport Post from './post/post'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\n\nexport default function App() {\n\n    useEffect(() => {\n        // autoLogin()\n    }, [])\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Main />\n                </Route>\n                <Route path=\"/post\" >\n                    <Post />\n                </Route>\n                <Route>\n                    <Main />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n\n    function autoLogin() {\n\n        // 필요한가?\n\n    }\n}","import React, { useState } from 'react'\nimport './styles.scss'\nimport { TextField, Button } from '@material-ui/core'\nimport axios from 'axios'\nimport { END_POINT, ADMIN_END_POINT } from '../../../constants/endpoint'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\nconst LoginPage = () => {\n\n    const [id, setId] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    return <div className=\"public__login__container\">\n        <div className=\"height__200\"></div>\n        <div className=\"login_form_container\">\n            <TextField onChange={idHandler} fullWidth value={id} label=\"아이디\" />\n            <TextField onChange={passwordHandler} fullWidth value={password} type=\"password\" label=\"패스워드\" />\n            <Button onClick={loginPressed} className=\"button\" variant=\"contained\" color=\"primary\">\n                로그인\n            </Button>\n        </div>\n    </div>\n\n    function idHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setId(value)\n    }\n\n    function passwordHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setPassword(value)\n    }\n\n    function loginPressed() {\n\n\n        axios.post(`${ADMIN_END_POINT}auth/admin-login`, {\n            id,\n            pw: password\n        })\n            .then(res => {\n\n\n                if (res.status === 200) {\n\n                    localStorage.setItem(\"i\", id)\n                    localStorage.setItem(\"p\", password)\n\n                    const token = res.headers.authorization\n\n                    if (token) {\n                        localStorage.setItem(\"token\", token)\n                        window.location.href = \"/\"\n                    } else {\n                        alert(\"잘못된 계정 정보\")\n                    }\n\n\n                }\n            })\n            .catch(err => {\n                console.error(err)\n                alert(err)\n            })\n    }\n}\n\nexport default LoginPage","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Login from './login/login'\n\n\nexport default function App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n                <Route>\n                    <Login />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n}","import React from 'react';\nimport Private from './components/private/privateRoutes'\nimport Public from './components/public/publicRoutes'\n\nfunction App() {\n\n  const token = localStorage.getItem('token')\n\n  if (token) {\n    return <Private />\n  } else {\n    return <Public />\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}