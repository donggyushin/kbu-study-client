{"version":3,"sources":["components/private/main/cell.tsx","components/global/dialog.tsx","components/private/main/main.tsx","constants/endpoint.tsx","components/private/post/post.tsx","components/private/privateRoutes.tsx","components/public/login/login.tsx","components/public/publicRoutes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","info","className","no","access_time","access_type","user_name","user_univ_id","user_major","admin_id","ip_addr","AlertDialog","title","message","callback","React","useState","open","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","autoFocus","Main","infos","setInfos","searchedInfos","setSearchedInfos","searching","setSearching","dialogTitle","setDialogTitle","dialogMessage","setDialogMessage","dialog","setDialog","noDesc","setNoDesc","useEffect","console","log","localStorage","getItem","axios","get","headers","Authorization","then","res","status","data","catch","err","error","to","style","textDecoration","logoutPressed","TextField","label","variant","onChange","event","value","target","filter","includes","admin_department","numberLabelTapped","map","index","key","compareNumber","a","b","compareNumber2","sortedInfos","sort","removeItem","window","location","href","Post","Cryptr","App","exact","path","cryptr","LoginPage","setId","password","setPassword","e","fullWidth","type","post","pw","encrytedId","encrypt","encrytedPassword","setItem","token","authorization","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd85e109.chunk.js","sourcesContent":["import React from 'react'\nimport { Info } from '../../../constants/types'\n\ninterface IProps {\n    info: Info\n}\n\nconst Cell: React.FC<IProps> = ({ info }) => {\n\n    return <div className=\"cell__container\">\n        <span>\n            {info.no}\n        </span>\n        <span>\n            {info.access_time}\n        </span>\n        <span>\n            {info.access_type}\n        </span>\n        <span>\n            {info.user_name}\n        </span>\n        <span>\n            {info.user_univ_id}\n        </span>\n        <span>\n            {info.user_major}\n        </span>\n        <span>\n            {info.admin_id}\n        </span>\n        <span>\n            {info.admin_id}\n        </span>\n        <span>\n            {info.ip_addr}\n        </span>\n    </div>\n}\n\nexport default Cell","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface IProps {\n    title: string\n    message: string\n    callback: () => void\n}\n\nconst AlertDialog: React.FC<IProps> = ({\n    title,\n    message,\n    callback\n}) => {\n    const [open, setOpen] = React.useState(true);\n\n\n    // const handleClose = () => {\n    //     setOpen(false);\n    // };\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                onClose={callback}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={callback} color=\"primary\" autoFocus>\n                        네\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default AlertDialog","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\nimport Cell from './cell'\nimport { Info } from '../../../constants/types'\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from '../../../constants/endpoint'\nimport { TextField } from '@material-ui/core'\nimport AlertDialog from '../../global/dialog'\n\nconst Main = () => {\n\n    const [infos, setInfos] = useState<Info[]>([])\n    const [searchedInfos, setSearchedInfos] = useState<Info[]>([])\n    const [searching, setSearching] = useState(false)\n    const [dialogTitle, setDialogTitle] = useState(\"\")\n    const [dialogMessage, setDialogMessage] = useState(\"\")\n    const [dialog, setDialog] = useState(false)\n    const [noDesc, setNoDesc] = useState(true)\n\n    useEffect(() => {\n        fetchInfos()\n    }, [])\n\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <div className=\"button active\">\n                view\n            </div>\n            <Link to=\"/post\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    post\n            </div>\n            </Link>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"search_bar__container\">\n            <TextField id=\"outlined-basic\" label=\"Search\" variant=\"outlined\" onChange={textFieldHandler} />\n        </div>\n        <div className=\"view__container\">\n            <div className=\"header\">\n                <span onClick={numberLabelTapped}>\n                    번호\n              </span>\n                <span onClick={numberLabelTapped}>\n                    접근 시간\n              </span>\n                <span>\n                    유형\n              </span>\n                <span>\n                    학생\n              </span>\n                <span>\n                    학번\n              </span>\n                <span>\n                    학과\n              </span>\n                <span>\n                    관리자\n              </span>\n                <span>\n                    관리부서\n              </span>\n                <span>\n                    ip 주소\n              </span>\n            </div>\n            {searching ?\n                searchedInfos.map((info, index) => {\n                    return <Cell key={index} info={info} />\n                }) : infos.map((info, index) => {\n                    return <Cell key={index} info={info} />\n                })\n\n            }\n\n\n            {dialog && <AlertDialog title={dialogTitle} message={dialogMessage} callback={closeAlertAndLogout} />}\n        </div>\n    </div>\n\n    function compareNumber(a: Info, b: Info) {\n        if (a.no < b.no) {\n            return -1;\n        }\n        if (a.no > b.no) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function compareNumber2(a: Info, b: Info) {\n        if (a.no < b.no) {\n            return 1;\n        }\n        if (a.no > b.no) {\n            return -1;\n        }\n        return 0;\n    }\n\n    function numberLabelTapped() {\n        console.log(\"number label tapped\")\n        const sortedInfos = noDesc ? infos.sort(compareNumber2) : infos.sort(compareNumber)\n        console.log(sortedInfos)\n        setNoDesc(!noDesc)\n        setSearchedInfos(sortedInfos)\n    }\n\n    function closeAlertAndLogout() {\n        setDialog(false)\n        logoutPressed()\n    }\n\n    function textFieldHandler(event: React.ChangeEvent<HTMLInputElement>) {\n        const value = event.target.value\n        if (value === \"\") {\n            setSearchedInfos([])\n            setSearching(false)\n            return\n        }\n\n        const searchedInfos = infos.filter((info) => {\n            if (info.user_name.includes(value) || info.user_major.includes(value) ||\n                info.admin_id.includes(value) || info.admin_department.includes(value) ||\n                info.user_univ_id.includes(value) || info.ip_addr.includes(value)\n            ) {\n                return true\n            } else {\n                return false\n            }\n        })\n\n        setSearchedInfos(searchedInfos)\n        setSearching(true)\n    }\n\n    function fetchInfos() {\n        console.log(localStorage.getItem(\"token\"))\n        axios.get(`${ADMIN_END_POINT}v1/msc/testfetch`, {\n            headers: {\n                Authorization: localStorage.getItem(\"token\")\n            }\n        })\n            .then(res => {\n\n                if (res.status === 200) {\n                    console.log(res.data.data)\n                    setInfos(res.data.data)\n                } else {\n                    setDialogTitle(\"성서봇입니다\")\n                    setDialogMessage(\"현재 다른 기기에서 접속한 유저가 있습니다...\")\n                    setDialog(true)\n                }\n            })\n            .catch(err => {\n                console.error(err)\n                setDialogTitle(\"성서봇입니다\")\n                setDialogMessage(\"현재 다른 기기에서 접속한 유저가 있습니다...\")\n                setDialog(true)\n            })\n    }\n\n\n\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Main","export const END_POINT = \"http://13.125.144.97:9766/\"\nexport const ADMIN_END_POINT = \"http://13.125.144.97:1487/\"","import React from 'react'\nimport './styles.scss'\nimport { Link } from 'react-router-dom'\nimport { TextField, Button } from '@material-ui/core'\nconst Post = () => {\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <Link to=\"/\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    view\n            </div>\n            </Link>\n            <div className=\"button active\">\n                post\n            </div>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"post__container\">\n            <div className=\"post__form\">\n                <TextField id=\"standard-basic\" label=\"학번\" />\n                <TextField id=\"standard-basic\" label=\"날짜\" />\n                <TextField id=\"standard-basic\" label=\"입실시간\" />\n                <TextField id=\"standard-basic\" label=\"퇴실시간\" />\n                <Button variant=\"contained\" color=\"primary\">\n                    제출\n</Button>\n            </div>\n        </div>\n    </div>\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Post","import React, { useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Main from './main/main'\nimport axios from 'axios'\nimport { END_POINT } from '../../constants/endpoint';\nimport Post from './post/post'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\n\nexport default function App() {\n\n    useEffect(() => {\n        // autoLogin()\n    }, [])\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Main />\n                </Route>\n                <Route path=\"/post\" >\n                    <Post />\n                </Route>\n                <Route>\n                    <Main />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n\n    function autoLogin() {\n\n        if (localStorage.getItem(\"i\") && localStorage.getItem(\"p\")) {\n            const encryptedId = localStorage.getItem(\"i\") as string\n            const encryptedPassword = localStorage.getItem(\"p\") as string\n            const decryptedId = cryptr.decrypt(encryptedId)\n            const decryptedPassword = cryptr.decrypt(encryptedPassword)\n\n            axios.post(`${END_POINT}auth/login`, {\n                id: decryptedId,\n                pw: decryptedPassword\n            })\n                .then(res => {\n                    const token = res.headers.authorization\n                    localStorage.setItem(\"token\", token)\n                })\n        }\n\n    }\n}","import React, { useState } from 'react'\nimport './styles.scss'\nimport { TextField, Button } from '@material-ui/core'\nimport axios from 'axios'\nimport { END_POINT, ADMIN_END_POINT } from '../../../constants/endpoint'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\nconst LoginPage = () => {\n\n    const [id, setId] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    return <div className=\"public__login__container\">\n        <div className=\"height__200\"></div>\n        <div className=\"login_form_container\">\n            <TextField onChange={idHandler} fullWidth value={id} label=\"아이디\" />\n            <TextField onChange={passwordHandler} fullWidth value={password} type=\"password\" label=\"패스워드\" />\n            <Button onClick={loginPressed} className=\"button\" variant=\"contained\" color=\"primary\">\n                로그인\n            </Button>\n        </div>\n    </div>\n\n    function idHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setId(value)\n    }\n\n    function passwordHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setPassword(value)\n    }\n\n    function loginPressed() {\n\n        axios.post(`${ADMIN_END_POINT}v1/auth/admin-login`, {\n            id,\n            pw: password\n        })\n            .then(res => {\n                if (res.status === 200) {\n\n                    console.log(res)\n\n                    const encrytedId = cryptr.encrypt(id)\n                    const encrytedPassword = cryptr.encrypt(password)\n\n                    localStorage.setItem(\"i\", encrytedId)\n                    localStorage.setItem(\"p\", encrytedPassword)\n\n                    const token = res.headers.authorization\n                    localStorage.setItem(\"token\", token)\n                    window.location.href = \"/\"\n                }\n            })\n            .catch(err => {\n                console.error(err)\n            })\n    }\n}\n\nexport default LoginPage","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Login from './login/login'\n\n\nexport default function App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n                <Route>\n                    <Login />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n}","import React from 'react';\nimport Private from './components/private/privateRoutes'\nimport Public from './components/public/publicRoutes'\n\nfunction App() {\n\n  const token = localStorage.getItem('token')\n\n  if (token) {\n    return <Private />\n  } else {\n    return <Public />\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}