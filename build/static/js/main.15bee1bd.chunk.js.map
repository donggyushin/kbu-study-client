{"version":3,"sources":["constants/endpoint.tsx","components/global/dialog.tsx","components/private/table.tsx","components/private/main/exitTimeInput.tsx","components/private/main/excelDown.tsx","components/private/currentUserTable.tsx","components/private/main/SelectedInfoCell.tsx","components/private/main/main.tsx","components/private/post/post.tsx","utils/autologin.ts","utils/milisecondsConverter.ts","components/private/aggregate/aggregateTable.tsx","components/private/aggregate/aggregateDetail.tsx","components/private/aggregate/excelDown.tsx","components/private/privateRoutes.tsx","components/private/aggregate/aggregate.tsx","components/public/login/login.tsx","components/public/publicRoutes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ADMIN_END_POINT","AlertDialog","title","message","callback","React","useState","open","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","autoFocus","useStyles","makeStyles","table","minWidth","SimpleTable","infos","noLabelTapped","selectInfoCell","turnOnExitTimeInput","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","info","i","key","scope","length","user_name","user_univ_id","user_major","is_manual","access_datetime","admin_id","admin_dept","disabled_aggregate","src","ExitTimeInput","exitTimeString","handleExitTimeString","turnOfExitTimeInput","wrapperRef","useRef","ref","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideAlerter","onChange","value","type","ExcelDown","datas","turnOffExcelDownView","data","filename","fields","style","padding","CurrentUserTable","accessTime","now","Date","date","diffTime","Math","abs","getTime","diffDays","ceil","repeat","repeat2","etag1","etag2","etag3","SelectedInfoCell","unSelectInfoCell","changeAggregateOfInfo","selectedInfo","setSelectedInfo","access_id","created_datetime","updated_datetime","ip_addr","window","confirm","axios","patch","headers","Authorization","localStorage","getItem","then","res","status","updatedInfo","catch","err","console","log","alert","theme","createStyles","formControl","margin","spacing","selectEmpty","marginTop","Main","setInfos","currentUsers","setCurrentUsers","searchedInfos","setSearchedInfos","searching","setSearching","dialogTitle","setDialogTitle","dialogMessage","setDialogMessage","dialog","setDialog","noDesc","setNoDesc","exitTimeInput","setExitTimeInput","setExitTimeString","excelDownView","setExcelDownView","selectedFromDate","setSelectedFromDate","selectedToDate","setSelectedToDate","allDept","setAllDept","category","setCategory","pw","post","setItem","token","authorization","getTodaysCurrentUsers","setInterval","fetchInfosFunction","getElementById","readOnly","error","logoutPressed","clearInterval","to","textDecoration","utils","DateFnsUtils","Grid","container","justify","disableToolbar","variant","format","label","KeyboardButtonProps","TextField","filter","includes","FormControl","InputLabel","Select","labelId","MenuItem","fetchInfos","fetchInfosDept1","numberLabelTapped","undefined","updatedInfos","e","dateFrom","dateTo","text","compareNumber","a","b","compareNumber2","sortedInfos","sort","date1","date2","date_from","getFullYear","getMonth","getDate","date_to","get","etag","todayUsers","reverse","user","currentUsersIds","user_univ_ids","push","count","user_id","todayUser","removeItem","location","href","Post","name","setName","sid","setSid","major","setMajor","selectedDate","setSelectedDate","handleDateChange","test","getHours","getMinutes","getSeconds","autoLogin","humanizeDuration","require","milisecondsConverter","miliseconds","result","replace","AggregateTable","aggregates","selectAggregate","row","univ_id","total_seconds","detail","from","AggregateDetail","aggregate","deselectAggregate","seconds","turnOfExcelDown","convertedAggregates","setConvertedAggregates","ag","no","start","end","Aggregate","fromDate","setFromDate","toDate","setToDate","setAggregates","selectedAggregate","setSelectedAggregate","fetchAggregate","n","App","exact","path","LoginPage","Cryptr","setId","password","setPassword","fullWidth","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15bee1bd.chunk.js","sourcesContent":["export const END_POINT = \"http://13.125.144.97:9766/\"\nexport const ADMIN_END_POINT = \"https://api.kbucard.com:9766/\"","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface IProps {\n    title: string\n    message: string\n    callback: () => void\n}\n\nconst AlertDialog: React.FC<IProps> = ({\n    title,\n    message,\n    callback\n}) => {\n    const [open, setOpen] = React.useState(true);\n\n\n    // const handleClose = () => {\n    //     setOpen(false);\n    // };\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                onClose={callback}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={callback} color=\"primary\" autoFocus>\n                        네\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default AlertDialog","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport './tableStyle.scss'\nimport { Info } from '../../constants/types';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\n\ninterface IProps {\n    infos: Info[]\n    noLabelTapped: () => void\n    turnOnExitTimeInput: (text: string) => void\n    selectInfoCell: (info: Info) => void\n}\n\nconst SimpleTable: React.FC<IProps> = ({ infos, noLabelTapped, turnOnExitTimeInput, selectInfoCell }) => {\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell onClick={noLabelTapped}>no</TableCell>\n                        <TableCell onClick={noLabelTapped} align=\"right\">이름</TableCell>\n                        <TableCell align=\"right\">학번</TableCell>\n                        <TableCell align=\"right\">전공</TableCell>\n                        <TableCell align=\"right\">자동/수동</TableCell>\n                        <TableCell align=\"right\">접근 시각</TableCell>\n                        <TableCell align=\"right\">인증 관리자</TableCell>\n                        <TableCell align=\"right\">관리자 부서</TableCell>\n                        <TableCell align=\"right\">집계 제외</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {infos.map((info, i) => (\n                        <TableRow onClick={() => {\n                            selectInfoCell(info)\n                        }} key={i}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {infos.length - i}\n                            </TableCell>\n                            <TableCell align=\"right\">{info.user_name}</TableCell>\n                            <TableCell align=\"right\">{info.user_univ_id}</TableCell>\n                            <TableCell align=\"right\">{info.user_major}</TableCell>\n                            <TableCell align=\"right\">{info.is_manual ? <span className=\"table__red_text\">수동</span> : <span>자동</span>}</TableCell>\n                            <TableCell align=\"right\">{info.access_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.admin_id}</TableCell>\n                            <TableCell align=\"right\">{info.admin_dept}</TableCell>\n                            <TableCell align=\"right\">{info.disabled_aggregate ? <img className=\"checked_mark\" src=\"/checked.png\" /> : \"\"}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default SimpleTable","import React, { useRef, useEffect } from 'react'\n\ninterface IProps {\n    exitTimeString: string\n    handleExitTimeString: (event: React.ChangeEvent<HTMLInputElement>) => void\n    turnOfExitTimeInput: () => void\n}\n\nfunction useOutsideAlerter(ref: any, turnOfExitTimeInput: () => void) {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            turnOfExitTimeInput()\n        }\n    }\n\n    useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    });\n}\n\n\nconst ExitTimeInput: React.FC<IProps> = ({\n    exitTimeString,\n    handleExitTimeString,\n    turnOfExitTimeInput\n}) => {\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, turnOfExitTimeInput);\n\n    return <div className=\"exittimeinput_container\">\n        <div ref={wrapperRef}>\n            <input onChange={handleExitTimeString} value={exitTimeString} type=\"text\" />\n            <button >변경</button>\n        </div>\n    </div>\n}\n\nexport default ExitTimeInput","import React, { useRef, useEffect } from 'react'\nimport { Info } from '../../../constants/types'\n//@ts-ignore\nimport { JsonToExcel } from 'react-json-excel';\n\ninterface IProps {\n    datas: Info[]\n    turnOffExcelDownView: () => void\n}\n\nfunction useOutsideAlerter(ref: any, turnOffExcelDownView: () => void) {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            turnOffExcelDownView()\n        }\n    }\n\n    useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    });\n}\n\n\nconst ExcelDown: React.FC<IProps> = ({\n    datas,\n    turnOffExcelDownView\n}) => {\n\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, turnOffExcelDownView);\n\n    const className = 'class-name-for-style',\n        filename = 'Excel-file',\n        fields = {\n            \"access_id\": \"No\",\n            \"access_datetime\": \"접근 시각\",\n            \"created_datetime\": \"데이터 생성시각\",\n            \"updated_datetime\": \"데이터 업데이트시각\",\n            \"disabled_aggregate\": \"집계 제외\",\n            \"user_name\": \"이름\",\n            \"user_univ_id\": \"학번\",\n            \"admin_id\": \"인증 관리자\",\n            \"admin_dept\": \"관리자 부서\",\n            \"is_manual\": \"자동/수동\",\n            \"ip_addr\": \"인증 ip\"\n        },\n        style = {\n            padding: \"5px\"\n        }\n\n    return <div className=\"excel_down_container\">\n        <div ref={wrapperRef} className=\"card\">\n            <JsonToExcel\n                data={datas}\n                className={className}\n                filename={filename}\n                fields={fields}\n                style={style}\n            />\n        </div>\n\n    </div>\n}\n\nexport default ExcelDown","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport './tableStyle.scss'\nimport { Info } from '../../constants/types';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\n\ninterface IProps {\n    infos: Info[]\n    noLabelTapped: () => void\n    turnOnExitTimeInput: (text: string) => void\n}\n\nconst CurrentUserTable: React.FC<IProps> = ({ infos, noLabelTapped, turnOnExitTimeInput }) => {\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell onClick={noLabelTapped}>no</TableCell>\n                        <TableCell onClick={noLabelTapped} align=\"right\">이름</TableCell>\n                        <TableCell align=\"right\">학번</TableCell>\n                        <TableCell align=\"right\">전공</TableCell>\n                        <TableCell align=\"right\">자동/수동</TableCell>\n                        <TableCell align=\"right\">접근 시각</TableCell>\n                        <TableCell align=\"right\">인증 관리자</TableCell>\n                        <TableCell align=\"right\">인증 경과시간</TableCell>\n                        <TableCell align=\"right\">관리자 부서</TableCell>\n                        {/* <TableCell align=\"right\">데이터 생성시각</TableCell>\n                        <TableCell align=\"right\">데이터 업데이트시각</TableCell> */}\n                        {/* <TableCell align=\"right\">인증 ip</TableCell> */}\n                        {/* <TableCell align=\"right\">집계 제외</TableCell> */}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {infos.map((info, i) => (\n                        <TableRow key={i}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {infos.length - i}\n                            </TableCell>\n                            <TableCell align=\"right\">{info.user_name}</TableCell>\n                            <TableCell align=\"right\">{info.user_univ_id}</TableCell>\n                            <TableCell align=\"right\">{info.user_major}</TableCell>\n                            <TableCell align=\"right\">{info.is_manual ? <span className=\"table__red_text\">수동</span> : <span>자동</span>}</TableCell>\n                            <TableCell align=\"right\">{info.access_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.admin_id}</TableCell>\n                            <TableCell align=\"right\">{\n                                getTime(info.access_datetime)\n\n                            }</TableCell>\n                            <TableCell align=\"right\">{info.admin_dept}</TableCell>\n                            {/* <TableCell align=\"right\">{info.created_datetime}</TableCell>\n                            <TableCell align=\"right\">{info.updated_datetime}</TableCell> */}\n                            {/* <TableCell align=\"right\">{info.ip_addr}</TableCell> */}\n                            {/* <TableCell align=\"right\">{info.disabled_aggregate ? <img className=\"checked_mark\" src=\"/checked.png\" /> : \"\"}</TableCell> */}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n\n\n    function getTime(accessTime: string) {\n        const now = new Date()\n        const date = new Date(accessTime)\n        const diffTime = Math.abs(now.getTime() - date.getTime())\n        const diffDays = Math.ceil(diffTime / (1000 * 60))\n\n        return `${diffDays}분`\n    }\n}\n\nexport default CurrentUserTable","import React, { useRef, useEffect, useState } from \"react\";\nimport './SelectedInfoCellStyles.scss'\nimport { Info } from '../../../constants/types'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from \"../../../constants/endpoint\";\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\ninterface IProps {\n    info: Info\n    unSelectInfoCell: () => void\n    changeAggregateOfInfo: (access_id: number) => void\n}\n\nfunction useOutsideAlerter(ref: any, unSelectInfoCell: () => void) {\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event: any) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                unSelectInfoCell()\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref]);\n}\n\n\nconst SelectedInfoCell: React.FC<IProps> = ({ info, unSelectInfoCell, changeAggregateOfInfo }) => {\n    const classes = useStyles();\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, unSelectInfoCell);\n\n\n    const [selectedInfo, setSelectedInfo] = useState(info)\n\n    return <div className={\"SelectedInfoCell\"}>\n        <div ref={wrapperRef} className=\"container\">\n            <div className=\"top_table\">\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>이름</TableCell>\n                                <TableCell align=\"right\">학번</TableCell>\n                                <TableCell align=\"right\">전공</TableCell>\n                                <TableCell align=\"right\">자동/수동</TableCell>\n                                <TableCell align=\"right\">접근 시각</TableCell>\n                                <TableCell align=\"right\">인증 관리자</TableCell>\n                                <TableCell align=\"right\">관리자 부서</TableCell>\n                                <TableCell align=\"right\">데이터 생성시각</TableCell>\n                                <TableCell align=\"right\">데이터 업데이트시각</TableCell>\n                                <TableCell align=\"right\">인증 IP</TableCell>\n                                <TableCell align=\"right\">집계제외</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <TableRow key={selectedInfo.access_id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {selectedInfo.user_name}\n                                </TableCell>\n                                <TableCell align=\"right\">{selectedInfo.user_univ_id}</TableCell>\n                                <TableCell align=\"right\">{selectedInfo.user_major}</TableCell>\n                                <TableCell align=\"right\">{selectedInfo.is_manual ? <span className=\"table__red_text\">수동</span> : <span>자동</span>}</TableCell>\n                                <TableCell align=\"right\">{selectedInfo.access_datetime}</TableCell>\n                                <TableCell align=\"right\">{selectedInfo.admin_id}</TableCell>\n                                <TableCell align=\"right\">{selectedInfo.admin_dept}</TableCell>\n                                <TableCell align=\"right\">{selectedInfo.created_datetime}</TableCell>\n                                <TableCell align=\"right\">{selectedInfo.updated_datetime}</TableCell>\n                                <TableCell align=\"right\">{selectedInfo.ip_addr}</TableCell>\n                                <TableCell align=\"right\">{selectedInfo.disabled_aggregate ? <img className=\"checked_mark\" src=\"/checked.png\" /> : \"\"}</TableCell>\n                            </TableRow>\n\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n            <div className=\"aggregate__toggle__button__container\">\n                {selectedInfo.disabled_aggregate ? <button onClick={aggregateCancleButtonTapped}>\n                    집계제외해제\n            </button> : <button onClick={aggregateButtonTapped}>\n                        집계제외\n            </button>}\n            </div>\n        </div>\n    </div>\n\n    function aggregateCancleButtonTapped() {\n        const result = window.confirm(\"정말 해당 데이터를 집계데이터에 추가시키겠습니까?\")\n        if (result) {\n\n            axios.patch(`${ADMIN_END_POINT}msc/log`, {\n                access_id: info.access_id,\n                disabled_aggregate: false\n            }, {\n                headers: {\n                    Authorization: localStorage.getItem('token')\n                }\n            })\n                .then(res => {\n                    if (res.status === 204) {\n                        changeAggregateOfInfo(info.access_id)\n                        let updatedInfo = selectedInfo\n                        updatedInfo.disabled_aggregate = false\n                        setSelectedInfo(updatedInfo)\n                    }\n                })\n                .catch(err => {\n                    console.log(err)\n                    alert(\"에러발생\")\n                })\n        }\n    }\n\n    function aggregateButtonTapped() {\n        const result = window.confirm(\"정말 해당 데이터를 집계데이터에서 제외하시겠습니까?\")\n        if (result) {\n            console.log(\"집계데이터 제외\")\n            axios.patch(`${ADMIN_END_POINT}msc/log`, {\n                access_id: info.access_id,\n                disabled_aggregate: true\n            }, {\n                headers: {\n                    Authorization: localStorage.getItem('token')\n                }\n            })\n                .then(res => {\n\n                    if (res.status === 204) {\n                        changeAggregateOfInfo(info.access_id)\n                        let updatedInfo = selectedInfo\n                        updatedInfo.disabled_aggregate = true\n                        setSelectedInfo(updatedInfo)\n\n                    }\n                })\n                .catch(err => {\n                    console.log(err)\n                    alert(\"에러발생\")\n                })\n        }\n    }\n}\n\nexport default SelectedInfoCell","import 'date-fns';\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\nimport { Info } from '../../../constants/types'\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from '../../../constants/endpoint'\nimport { TextField } from '@material-ui/core'\nimport AlertDialog from '../../global/dialog'\nimport SimpleTable from '../table'\nimport ExitTimeInput from './exitTimeInput'\nimport ExcelDown from './excelDown'\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport CurrentUserTable from '../currentUserTable';\nimport SelectedInfoCell from './SelectedInfoCell';\n\nvar repeat: any\nvar repeat2: any\nvar etag1: string\nvar etag2: string\nvar etag3: string\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\nconst Main = () => {\n\n\n    // 여기서 infos 는 사용자 데이터라고 생각하면 됨\n    const [infos, setInfos] = useState<Info[]>([])\n    // 사용자 데이터를 받아올때마다 현재 사용자들만 따로 분류해놓은 데이터가 필요함\n    const [currentUsers, setCurrentUsers] = useState<Info[]>([])\n    const [searchedInfos, setSearchedInfos] = useState<Info[]>([])\n    const [searching, setSearching] = useState(false)\n    const [dialogTitle, setDialogTitle] = useState(\"\")\n    const [dialogMessage, setDialogMessage] = useState(\"\")\n    const [dialog, setDialog] = useState(false)\n    const [noDesc, setNoDesc] = useState(true)\n    const [exitTimeInput, setExitTimeInput] = useState(false)\n    const [exitTimeString, setExitTimeString] = useState(\"\")\n    const [excelDownView, setExcelDownView] = useState(false)\n    const [selectedFromDate, setSelectedFromDate] = React.useState<Date | null>(\n        new Date(),\n    );\n    const [selectedToDate, setSelectedToDate] = useState<Date | null>(new Date())\n    const [allDept, setAllDept] = useState(false)\n    const classes = useStyles();\n    const [category, setCategory] = React.useState('');\n    const [selectedInfo, setSelectedInfo] = useState<Info>()\n\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCategory(event.target.value as string);\n    };\n\n\n    useEffect(() => {\n\n        const id = localStorage.getItem(\"i\")\n        const pw = localStorage.getItem(\"p\")\n\n        if (id && pw) {\n            axios.post(`${ADMIN_END_POINT}auth/admin-login`, {\n                id,\n                pw\n            })\n                .then(res => {\n\n\n                    if (res.status === 200) {\n\n                        localStorage.setItem(\"i\", id)\n                        localStorage.setItem(\"p\", pw)\n\n                        const token = res.headers.authorization\n\n                        if (token) {\n                            localStorage.setItem(\"token\", token)\n\n\n                            getTodaysCurrentUsers()\n                            repeat2 = setInterval(() => {\n                                getTodaysCurrentUsers()\n                            }, 3000)\n\n                            if (selectedToDate && selectedFromDate) {\n                                fetchInfosFunction(selectedFromDate, selectedToDate)\n                            }\n\n                            makeDateInputElementInvalid()\n                        } else {\n                            alert(\"잘못된 계정 정보\")\n                        }\n\n\n                    }\n                })\n                .catch(err => {\n                    console.error(err)\n                    alert(err)\n                })\n        } else {\n            // 로그아웃 시켜주기?\n            logoutPressed()\n        }\n\n        etag1 = \"\"\n        etag2 = \"\"\n\n        return function cleanup() {\n            clearInterval(repeat)\n            clearInterval(repeat2)\n        }\n    }, [])\n\n\n\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <div className=\"button active\">\n                조회\n            </div>\n            <Link to=\"/aggregate\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    집계\n            </div>\n            </Link>\n            <Link to=\"/post\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    추가\n            </div>\n            </Link>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"toolbars_container\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid className=\"grid\" container justify=\"space-around\">\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"검색 시작일\"\n                        value={selectedFromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"검색 마지막일\"\n                        value={selectedToDate}\n                        onChange={handleToDateChangee}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <TextField id=\"standard-basic\" className=\"standard-basic\" label=\"검색\" variant=\"standard\" onChange={textFieldHandler} />\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-label\">검색조건</InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={category}\n                            onChange={handleChange}\n                        >\n                            <MenuItem value={\"user_name\"}>이름</MenuItem>\n                            <MenuItem value={\"user_univ_id\"}>학번</MenuItem>\n                            <MenuItem value={\"user_major\"}>전공</MenuItem>\n                            <MenuItem value={\"admin_id\"}>인증 관리자</MenuItem>\n                            <MenuItem value={\"admin_dept\"}>관리자 부서</MenuItem>\n                            <MenuItem value={\"ip_addr\"}>인증 ip</MenuItem>\n                        </Select>\n                    </FormControl>\n                    {allDept ? <button id=\"dept1\" onClick={dept1ButtonTappedAgain} className=\"dept1\">\n                        현재부서로그 보기\n                    </button> : <button id=\"dept1\" onClick={dept1ButtonTapped} className=\"dept1\">\n                            전체부서로그 보기\n                    </button>}\n\n                </Grid>\n            </MuiPickersUtilsProvider>\n        </div>\n        <div className=\"view_container_container\">\n            <div className=\"view__container\">\n                <div className=\"label\">\n                    현재 사용자\n                    </div>\n                <CurrentUserTable turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={currentUsers} />\n            </div>\n        </div>\n\n        <div className=\"view_container_container\">\n            <div className=\"view__container\">\n                <div className=\"label\">\n                    전체 사용자\n                </div>\n                {searching ? <SimpleTable selectInfoCell={selectInfoCell} turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={searchedInfos} /> : <SimpleTable selectInfoCell={selectInfoCell} turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={infos} />}\n\n\n                {dialog && <AlertDialog title={dialogTitle} message={dialogMessage} callback={closeAlertAndLogout} />}\n            </div>\n\n        </div>\n        <button onClick={excelDownButtonTapped} className=\"excel_down_button\">\n            엑셀다운\n        </button>\n        {(excelDownView && searching) && <ExcelDown turnOffExcelDownView={turnOffExcelDownView} datas={searchedInfos} />}\n        {(excelDownView && !searching) && <ExcelDown turnOffExcelDownView={turnOffExcelDownView} datas={infos} />}\n        {selectedInfo && <SelectedInfoCell unSelectInfoCell={unSelectInfoCell} info={selectedInfo} changeAggregateOfInfo={changeAggregateOfInfo} />}\n\n        {exitTimeInput && <ExitTimeInput\n            turnOfExitTimeInput={turnOfExitTimeInput}\n            handleExitTimeString={handleExitTimeString} exitTimeString={exitTimeString} />}\n    </div>\n\n    function dept1ButtonTappedAgain() {\n\n        if (selectedFromDate && selectedToDate) {\n            etag3 = \"\"\n            etag1 = \"\"\n            clearInterval(repeat)\n            fetchInfos(selectedFromDate, selectedToDate)\n            repeat = setInterval(() => {\n                fetchInfos(selectedFromDate, selectedToDate)\n            }, 3000)\n\n            setAllDept(false)\n\n        }\n    }\n\n    function dept1ButtonTapped() {\n\n        if (selectedFromDate && selectedToDate) {\n            etag3 = \"\"\n            etag1 = \"\"\n            clearInterval(repeat)\n            fetchInfosDept1(selectedFromDate, selectedToDate)\n            repeat = setInterval(() => {\n                fetchInfosDept1(selectedFromDate, selectedToDate)\n            }, 3000)\n\n            setAllDept(true)\n\n        }\n    }\n\n    function changeAggregateOfInfo(access_id: number) {\n        const updatedInfos = infos.map((info) => {\n            if (info.access_id === access_id) {\n                info.disabled_aggregate = !info.disabled_aggregate\n                return info\n            } else {\n                return info\n            }\n        })\n        setInfos(updatedInfos)\n    }\n\n    function unSelectInfoCell() {\n        setSelectedInfo(undefined)\n    }\n\n    function selectInfoCell(info: Info) {\n        setSelectedInfo(info)\n    }\n\n    function fetchInfosFunction(dateFrom: Date, dateTo: Date) {\n\n        fetchInfos(dateFrom, dateTo)\n        repeat = setInterval(function () { fetchInfos(dateFrom, dateTo) }, 3000);\n    }\n\n    function makeDateInputElementInvalid() {\n        const input = document.getElementById(\"date-picker-inline\") as HTMLInputElement\n        input.readOnly = true;\n    }\n\n    function handleToDateChangee(date: Date | null) {\n        clearInterval(repeat)\n        setSelectedToDate(date)\n        if (selectedFromDate && date) {\n            fetchInfosFunction(selectedFromDate, date)\n        }\n\n    }\n\n    function handleFromDateChange(date: Date | null) {\n        clearInterval(repeat)\n        setSelectedFromDate(date)\n        if (date && selectedToDate) {\n            fetchInfosFunction(date, selectedToDate)\n        }\n\n    }\n\n    function turnOffExcelDownView() {\n        setExcelDownView(false)\n    }\n\n    function excelDownButtonTapped() {\n        setExcelDownView(true)\n    }\n\n    function turnOfExitTimeInput() {\n        setExitTimeInput(false)\n    }\n\n    function handleExitTimeString(e: React.ChangeEvent<HTMLInputElement>) {\n        setExitTimeString(e.target.value)\n    }\n\n    function turnOnExitTimeInput(text: string) {\n        setExitTimeInput(true)\n        setExitTimeString(text)\n    }\n\n    function compareNumber(a: Info, b: Info) {\n        if (a.access_id < b.access_id) {\n            return -1;\n        }\n        if (a.access_id > b.access_id) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function compareNumber2(a: Info, b: Info) {\n        if (a.access_id < b.access_id) {\n            return 1;\n        }\n        if (a.access_id > b.access_id) {\n            return -1;\n        }\n        return 0;\n    }\n\n    function numberLabelTapped() {\n        const sortedInfos = noDesc ? infos.sort(compareNumber2) : infos.sort(compareNumber)\n        setNoDesc(!noDesc)\n        setSearchedInfos(sortedInfos)\n    }\n\n    function closeAlertAndLogout() {\n        setDialog(false)\n        logoutPressed()\n    }\n\n    function textFieldHandler(event: React.ChangeEvent<HTMLInputElement>) {\n        const value = event.target.value\n\n        let searchedInfos = []\n\n\n\n        switch (category) {\n            case \"user_name\":\n\n                searchedInfos = infos.filter((info) => {\n                    if (info.user_name.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"user_univ_id\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.user_univ_id.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"user_major\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.user_major.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"admin_id\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.admin_id.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"admin_dept\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.admin_dept.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            case \"ip_addr\":\n                searchedInfos = infos.filter((info) => {\n                    if (info.ip_addr.includes(value)) {\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                break;\n            default:\n                setSearching(false)\n                searchedInfos = infos\n                break;\n        }\n\n        setSearchedInfos(searchedInfos)\n        setSearching(true)\n        return\n    }\n\n    function getTodaysCurrentUsers() {\n\n        const date1 = new Date()\n        const date2 = new Date()\n\n        const date_from = `${date1.getFullYear()}-${date1.getMonth() + 1}-${date1.getDate()}`\n        const date_to = `${date2.getFullYear()}-${date2.getMonth() + 1}-${date2.getDate()}`\n        axios.get(`${ADMIN_END_POINT}msc/log?date_from=${date_from}&date_to=${date_to}`, {\n            headers: {\n                Authorization: localStorage.getItem(\"token\"),\n                \"If-None-Match\": etag2\n            }\n        }).then(res => {\n            if (res.status === 200) {\n                const etag = res.headers['etag']\n                etag2 = etag\n                let todayUsers = res.data.data.data as Info[]\n                todayUsers = todayUsers.reverse()\n                todayUsers = todayUsers.filter((user) => {\n                    if (user.disabled_aggregate) {\n                        return false\n                    } else {\n                        return true\n                    }\n                })\n                let currentUsersIds: String[] = []\n                let currentUsers: Info[] = []\n\n                // 중복없이 유저들의 학번을 담고 있는 데이터셋을 만들자. \n                let user_univ_ids: String[] = []\n                for (let i = 0; i < todayUsers.length; i++) {\n                    const user = todayUsers[i];\n                    if (user_univ_ids.includes(user.user_univ_id) == false) {\n                        user_univ_ids.push(user.user_univ_id)\n                    }\n                }\n\n\n                // 각각의 학번들마다 todayUsers에 면번 포함되어있는지를 카운트해준다. \n                for (let i = 0; i < user_univ_ids.length; i++) {\n                    const user_univ_id = user_univ_ids[i];\n                    let count = 0\n                    todayUsers.map((user) => {\n                        if (user.user_univ_id == user_univ_id) {\n                            count++\n                        }\n                    })\n\n                    // 만약에 count가 홀수개라면 현재 사용중인 유저의 id이다. \n                    if (count % 2 == 1) {\n                        currentUsersIds.push(user_univ_id)\n                    }\n                }\n\n\n                // 해당 id 값을 가진 유저들을 가장 최근 데이터만 한번씩만 골라낸다. \n                for (let i = 0; i < currentUsersIds.length; i++) {\n                    const user_id = currentUsersIds[i];\n                    for (let i = 0; i < todayUsers.length; i++) {\n                        const todayUser = todayUsers[i];\n                        if (todayUser.user_univ_id == user_id) {\n                            currentUsers.push(todayUser)\n                            break;\n                        }\n                    }\n                }\n\n                // 현재 사용중인 유저들\n                setCurrentUsers(currentUsers)\n\n            } else {\n                console.log(res)\n                setDialogTitle(\"성서봇입니다\")\n                setDialogMessage(\"에러 발생 부분 처리중\")\n                setDialog(true)\n            }\n        }).catch(err => {\n\n        })\n\n    }\n\n    function fetchInfosDept1(dateFrom: Date, dateTo: Date) {\n        const date_from = `${dateFrom.getFullYear()}-${dateFrom.getMonth() + 1}-${dateFrom.getDate()}`\n        const date_to = `${dateTo.getFullYear()}-${dateTo.getMonth() + 1}-${dateTo.getDate()}`\n\n        axios.get(`${ADMIN_END_POINT}msc/log?date_from=${date_from}&date_to=${date_to}`, {\n            headers: {\n                \"Authorization\": localStorage.getItem(\"token\"),\n                \"If-None-Match\": etag3\n            }\n        }).then(res => {\n            const infos = res.data.data.data as Info[]\n            infos.sort(compareNumber2)\n            const etag = res.headers['etag']\n            etag3 = etag\n            setInfos(infos)\n        }).catch(err => {\n\n        })\n    }\n\n    function fetchInfos(dateFrom: Date, dateTo: Date) {\n\n        const date_from = `${dateFrom.getFullYear()}-${dateFrom.getMonth() + 1}-${dateFrom.getDate()}`\n        const date_to = `${dateTo.getFullYear()}-${dateTo.getMonth() + 1}-${dateTo.getDate()}`\n\n\n        axios.get(`${ADMIN_END_POINT}msc/log?date_from=${date_from}&date_to=${date_to}`, {\n            headers: {\n                \"Authorization\": localStorage.getItem(\"token\"),\n                \"If-None-Match\": etag1\n            }\n        })\n            .then(res => {\n                if (res.status === 200) {\n                    const infos = res.data.data.data as Info[]\n                    infos.sort(compareNumber2)\n                    const etag = res.headers['etag']\n                    etag1 = etag\n                    setInfos(infos)\n                } else if (res.status === 304) {\n\n                    return\n                }\n                else {\n                    setDialogTitle(\"성서봇입니다\")\n                    setDialogMessage(\"에러 발생 부분 처리중\")\n                    setDialog(true)\n                }\n            }).catch(err => {\n                console.log(\"캐싱\")\n            })\n    }\n\n\n\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Main","import 'date-fns';\nimport React, { useState } from 'react'\nimport './styles.scss'\nimport { Link } from 'react-router-dom'\nimport { TextField, Button } from '@material-ui/core'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from '../../../constants/endpoint';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\n\nconst Post = () => {\n\n    const classes = useStyles();\n\n    const [name, setName] = useState(\"\")\n    const [sid, setSid] = useState(\"\")\n    const [major, setMajor] = React.useState(\"\");\n    const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n        new Date(),\n    );\n\n    const handleMajorChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setMajor(event.target.value as string);\n    };\n\n    const handleDateChange = (date: Date | null) => {\n        setSelectedDate(date);\n    };\n\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <Link to=\"/\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    조회\n            </div>\n            </Link>\n            <Link to=\"/aggregate\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    집계\n            </div>\n            </Link>\n            <div className=\"button active\">\n                추가\n            </div>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"post__container\">\n            <div className=\"post__form\">\n                <TextField value={name} onChange={handleName} id=\"standard-basic\" label=\"이름\" />\n                <TextField value={sid} onChange={handleSid} id=\"standard-basic\" label=\"학번\" />\n                <FormControl className={classes.formControl}>\n                    <InputLabel id=\"demo-simple-select-label\">학과</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        className=\"select\"\n                        value={major}\n                        onChange={handleMajorChange}\n                    >\n                        <MenuItem value={'컴퓨터소프트웨어학과'}>컴퓨터소프트웨어학과</MenuItem>\n                        <MenuItem value={'영유아보육학과'}>영유아보육학과</MenuItem>\n                        <MenuItem value={'사회복지학과'}>사회복지학과</MenuItem>\n                        <MenuItem value={'성서학과'}>성서학과</MenuItem>\n                        <MenuItem value={'간호학과'}>간호학과</MenuItem>\n                    </Select>\n                </FormControl>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <Grid container justify=\"center\">\n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"\n                            format=\"MM/dd/yyyy\"\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            label=\"날짜를 지정해주세요\"\n                            value={selectedDate}\n                            onChange={handleDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                        <KeyboardTimePicker\n                            margin=\"normal\"\n                            id=\"time-picker\"\n                            label=\"시각을 지정해주세요\"\n                            value={selectedDate}\n                            onChange={handleDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change time',\n                            }}\n                        />\n                    </Grid>\n                </MuiPickersUtilsProvider>\n                <Button onClick={submitButtonTapped} variant=\"contained\" color=\"primary\">\n                    제출\n                </Button>\n            </div>\n        </div>\n    </div>\n\n    function handleSid(e: React.ChangeEvent<HTMLInputElement>) {\n        setSid(e.target.value)\n    }\n\n    function handleName(e: React.ChangeEvent<HTMLInputElement>) {\n        setName(e.target.value)\n    }\n\n    function submitButtonTapped() {\n\n        const pattern = /20[12]\\d0\\d{4}/i\n        const sidCheck = pattern.test(sid)\n        if (sidCheck === false) {\n            alert(\"학번을 제대로 기입해주세요\")\n            return\n        }\n        if (major === \"\") {\n            alert(\"학과를 제대로 기입해주세요\")\n            return\n        }\n\n        const token = localStorage.getItem(\"token\")\n\n\n        const access_datetime = `${selectedDate?.getFullYear()}-${selectedDate!.getMonth() + 1}-${selectedDate?.getDate()} ${selectedDate?.getHours()}:${selectedDate?.getMinutes()}:${selectedDate?.getSeconds()}`\n        axios.post(`${ADMIN_END_POINT}msc/log`, {\n            user_name: name,\n            user_univ_id: sid,\n            user_major: major,\n            access_datetime: access_datetime\n        }, {\n            headers: {\n                Authorization: token\n            }\n        })\n            .then(res => {\n                if (res.status === 200) {\n                    console.log(res)\n                    initData()\n                    alert(\"데이터 입력 성공\")\n                } else {\n                    alert(\"데이터 입력 실패\")\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    function initData() {\n        setName(\"\")\n        setSid(\"\")\n        setMajor(\"\")\n\n    }\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Post","import axios from 'axios'\nimport { ADMIN_END_POINT } from '../constants/endpoint'\n\nexport default function autoLogin() {\n\n    // 필요한가?\n    const id = localStorage.getItem(\"i\")\n    const pw = localStorage.getItem(\"p\")\n\n    if (id && pw) {\n        axios.post(`${ADMIN_END_POINT}auth/admin-login`, {\n            id,\n            pw\n        })\n            .then(res => {\n\n\n                if (res.status === 200) {\n\n                    localStorage.setItem(\"i\", id)\n                    localStorage.setItem(\"p\", pw)\n\n                    const token = res.headers.authorization\n\n                    if (token) {\n                        localStorage.setItem(\"token\", token)\n                        // window.location.href = \"/\"\n                    } else {\n                        alert(\"잘못된 계정 정보\")\n                    }\n\n\n                }\n            })\n            .catch(err => {\n                console.error(err)\n                alert(err)\n            })\n    }\n\n}","const humanizeDuration = require('humanize-duration')\nexport default function milisecondsConverter(miliseconds: number) {\n    let result = humanizeDuration(miliseconds) as String\n\n    result = result.replace('minute', '분')\n    result = result.replace('minutes', '분')\n\n    result = result.replace('seconds', '초')\n    result = result.replace('second', '초')\n\n    result = result.replace('hour', '시')\n    result = result.replace('hours', '시')\n\n    result = result.replace('day', '일')\n    result = result.replace('days', '일')\n\n    result = result.replace('week', '주')\n    result = result.replace('weeks', '주')\n\n    result = result.replace('month', '달')\n    result = result.replace('months', '달')\n\n    result = result.replace('year', '년')\n    result = result.replace('years', '년')\n\n    result = result.replace('s', '')\n\n    return result\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { IAggregate } from '../../../constants/types';\nimport milisecondsConverter from '../../../utils/milisecondsConverter';\nconst humanizeDuration = require('humanize-duration')\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\ninterface IProps {\n    aggregates: IAggregate[]\n    selectAggregate: (aggregate: IAggregate) => void\n}\n\nconst AggregateTable: React.FC<IProps> = ({\n    aggregates,\n    selectAggregate\n}) => {\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>번호</TableCell>\n                        <TableCell align=\"right\">학번</TableCell>\n                        <TableCell align=\"right\">총 집계 시간</TableCell>\n                        <TableCell align=\"right\">시작</TableCell>\n                        <TableCell align=\"right\">종료</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {aggregates.map((row, i) => {\n                        console.log(\"row: \", row)\n                        return (\n\n                            <TableRow onClick={() => {\n                                selectAggregate(aggregates[i])\n                            }} key={i}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {i + 1}\n                                </TableCell>\n\n                                <TableCell align=\"right\">{row.univ_id}</TableCell>\n                                <TableCell align=\"right\">{milisecondsConverter(row.value.total_seconds * 1000)}</TableCell>\n                                <TableCell align=\"right\">{row.value.detail[0] ? row.value.detail[0].from : \"데이터 없음\"}</TableCell>\n                                <TableCell align=\"right\">{row.value.detail[row.value.detail.length - 1] ? row.value.detail[row.value.detail.length - 1].to : \"데이터 없음\"}</TableCell>\n                            </TableRow>\n\n                        )\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default AggregateTable","import React, { useEffect, useRef } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { IAggregate } from '../../../constants/types';\nimport humanizeDuration from 'humanize-duration'\nimport milisecondsConverter from '../../../utils/milisecondsConverter';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\ninterface IProps {\n    aggregate: IAggregate\n    deselectAggregate: () => void\n}\n\nfunction useOutsideAlerter(ref: any, deselectAggregate: () => void) {\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event: any) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                deselectAggregate()\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref]);\n}\n\nconst AggregateDetail: React.FC<IProps> = ({\n    aggregate,\n    deselectAggregate\n}) => {\n\n    const classes = useStyles();\n\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, deselectAggregate);\n\n    return <div className={\"aggregate_detail_container\"}>\n        <div className=\"container\" ref={wrapperRef}>\n            <div className=\"top\" >\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n\n                                <TableCell>학번</TableCell>\n                                <TableCell align=\"right\">총 집계 시간</TableCell>\n                                <TableCell align=\"right\">시작</TableCell>\n                                <TableCell align=\"right\">종료</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <TableRow key={aggregate.univ_id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {aggregate.univ_id}\n                                </TableCell>\n\n                                <TableCell align=\"right\">{milisecondsConverter(aggregate.value.total_seconds * 1000)}</TableCell>\n                                <TableCell align=\"right\">{aggregate.value.detail[0] ? aggregate.value.detail[0].from : \"데이터 없음\"}</TableCell>\n                                <TableCell align=\"right\">{aggregate.value.detail[aggregate.value.detail.length - 1] ? aggregate.value.detail[aggregate.value.detail.length - 1].to : \"데이터 없음\"}</TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n            <div className=\"bottom\" >\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>번호</TableCell>\n                                <TableCell align=\"right\">학번</TableCell>\n                                <TableCell align=\"right\">입실</TableCell>\n                                <TableCell align=\"right\">퇴실</TableCell>\n                                <TableCell align=\"right\">집계 시간</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {aggregate.value.detail.map((data, i) => {\n                                return <TableRow key={aggregate.univ_id}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {i + 1}\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        {aggregate.univ_id}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{data.from}</TableCell>\n                                    <TableCell align=\"right\">{data.to}</TableCell>\n                                    <TableCell align=\"right\">{milisecondsConverter(data.seconds)}</TableCell>\n                                </TableRow>\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n\n        </div>\n\n    </div>\n}\n\nexport default AggregateDetail","import React, { useState, useEffect } from 'react'\n\n//@ts-ignore\nimport { JsonToExcel } from 'react-json-excel';\nimport { IAggregate, IConvertedAggregate } from '../../../constants/types';\n\ninterface IProps {\n    turnOfExcelDown: () => void\n    aggregates: IAggregate[]\n}\n\nfunction useOutsideAlerter(ref: any, turnOfExcelDown: () => void) {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            turnOfExcelDown()\n        }\n    }\n\n    React.useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    });\n}\n\nconst ExcelDown: React.FC<IProps> = ({ turnOfExcelDown, aggregates }) => {\n\n    const wrapperRef = React.useRef(null);\n    useOutsideAlerter(wrapperRef, turnOfExcelDown);\n\n    const [convertedAggregates, setConvertedAggregates] = useState<IConvertedAggregate[]>([])\n\n\n    useEffect(() => {\n\n        const test = aggregates.map((ag, i) => {\n            const univ_id = ag.univ_id\n            const total_seconds = ag.value.total_seconds\n            const start = ag.value.detail[0] ? ag.value.detail[0].from : \"데이터 없음\"\n            const end = ag.value.detail[aggregates.length - 1] ? ag.value.detail[aggregates.length - 1].to : \"데이터 없음\"\n            return {\n                no: i + 1,\n                univ_id,\n                total_seconds,\n                start,\n                end\n            }\n        })\n\n        setConvertedAggregates(test)\n\n    }, [])\n\n    const filename = \"aggregate-excel\"\n    const fields = {\n        \"no\": \"No\",\n        \"univ_id\": \"학번\",\n        \"total_seconds\": \"총 집계 시간\",\n        \"start\": \"시작\",\n        \"end\": \"종료\"\n    }\n\n\n\n    return <div className={\"excel__down\"}>\n        <div ref={wrapperRef} className=\"card\">\n            {convertedAggregates.length != 0 && <JsonToExcel\n                data={convertedAggregates}\n                filename={filename}\n                fields={fields}\n            />}\n\n        </div>\n    </div>\n}\n\nexport default ExcelDown","import React, { useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Main from './main/main'\nimport Post from './post/post'\nimport autoLogin from '../../utils/autologin';\nimport Aggregate from './aggregate/aggregate';\n\nvar repeat: any\n\nexport default function App() {\n\n    useEffect(() => {\n        autoLogin()\n        repeat = setInterval(() => {\n            autoLogin()\n        }, 1000 * 60 * 10)\n\n        return function cleanup() {\n            clearInterval(repeat)\n        }\n    }, [])\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Main />\n                </Route>\n                <Route path=\"/post\" >\n                    <Post />\n                </Route>\n                <Route path=\"/aggregate\">\n                    <Aggregate />\n                </Route>\n                <Route>\n                    <Main />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n\n}","import 'date-fns';\nimport React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from '../../../constants/endpoint';\nimport { Info } from '../../../constants/types';\nimport { IAggregate } from '../../../constants/types'\nimport AggregateTable from './aggregateTable';\nimport AggregateDetail from './aggregateDetail';\nimport ExcelDown from './excelDown';\n\nconst Aggregate: React.FC = () => {\n\n    const [fromDate, setFromDate] = React.useState<Date | null>(\n        new Date(),\n    );\n\n    const [toDate, setToDate] = React.useState<Date | null>(new Date())\n    const [aggregates, setAggregates] = useState<IAggregate[]>([])\n    const [selectedAggregate, setSelectedAggregate] = useState<IAggregate>()\n    const [excelDownView, setExcelDownView] = useState(false)\n\n    const handleDateChange = (date: Date | null) => {\n        setFromDate(date);\n        if (date && toDate) {\n            fetchAggregate(date, toDate)\n        }\n    };\n\n    const handleToDateChange = (date: Date | null) => {\n        setToDate(date);\n        if (date && fromDate) {\n            fetchAggregate(fromDate, date)\n        }\n    };\n\n    useEffect(() => {\n        if (fromDate && toDate) {\n            fetchAggregate(fromDate, toDate)\n        }\n    }, [])\n\n    return <div className=\"aggregate__container\">\n        <div className=\"navigation__bar\">\n            <Link to=\"/\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    조회\n            </div>\n            </Link>\n            <div className=\"button active\">\n                집계\n            </div>\n\n            <Link to=\"/post\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    추가\n            </div>\n            </Link>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"date_picker_Container\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"검색 시작일\"\n                        value={fromDate}\n                        onChange={handleDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"검색 마지막일\"\n                        value={toDate}\n                        onChange={handleToDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n\n                </Grid>\n            </MuiPickersUtilsProvider>\n        </div>\n        <div className=\"aggregate_table_container\">\n            <AggregateTable selectAggregate={selectAggregate} aggregates={aggregates} />\n        </div>\n        <button onClick={excelDownButtonTapped} className=\"excel_down_button\">\n            엑셀 다운로드\n        </button>\n        {selectedAggregate && <AggregateDetail deselectAggregate={deselectAggregate} aggregate={selectedAggregate} />}\n        {excelDownView && <ExcelDown aggregates={aggregates} turnOfExcelDown={turnOfExcelDown} />}\n\n    </div>\n\n    function turnOfExcelDown() {\n        setExcelDownView(false)\n    }\n\n    function excelDownButtonTapped() {\n        setExcelDownView(true)\n    }\n\n    function deselectAggregate() {\n        setSelectedAggregate(undefined)\n    }\n\n    function selectAggregate(aggregate: IAggregate) {\n        setSelectedAggregate(aggregate)\n    }\n\n    function fetchAggregate(fromDate: Date, toDate: Date) {\n\n        console.log(\"fetch aggregate\")\n\n        const date_from = `${fromDate.getFullYear()}-${fromDate.getMonth() + 1}-${fromDate.getDate()}`\n        const date_to = `${toDate.getFullYear()}-${toDate.getMonth() + 1}-${toDate.getDate()}`\n\n        axios.get(`${ADMIN_END_POINT}msc/log?date_from=${date_from}&date_to=${date_to}`, {\n            headers: {\n                Authorization: localStorage.getItem(\"token\")\n            }\n        })\n            .then(res => {\n                if (res.status === 200) {\n                    const infos = res.data.data.data as Info[]\n                    axios.post(`${ADMIN_END_POINT}msc/aggregate`, {\n                        data: infos\n                    })\n                        .then(res => {\n                            const data = res.data.data\n                            let aggregates: IAggregate[] = []\n                            for (var n in data) {\n\n                                const aggregate: IAggregate = {\n                                    univ_id: n,\n                                    value: data[n]\n                                }\n\n                                aggregates.push(aggregate)\n\n                            }\n                            setAggregates(aggregates)\n                        })\n                        .catch(err => {\n                            console.log(err)\n                        })\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n\n    }\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Aggregate","import React, { useState } from 'react'\nimport './styles.scss'\nimport { TextField, Button } from '@material-ui/core'\nimport axios from 'axios'\nimport { END_POINT, ADMIN_END_POINT } from '../../../constants/endpoint'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\nconst LoginPage = () => {\n\n    const [id, setId] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    return <div className=\"public__login__container\">\n        <div className=\"height__200\"></div>\n        <div className=\"login_form_container\">\n            <TextField onChange={idHandler} fullWidth value={id} label=\"아이디\" />\n            <TextField onChange={passwordHandler} fullWidth value={password} type=\"password\" label=\"패스워드\" />\n            <Button onClick={loginPressed} className=\"button\" variant=\"contained\" color=\"primary\">\n                로그인\n            </Button>\n        </div>\n    </div>\n\n    function idHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setId(value)\n    }\n\n    function passwordHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setPassword(value)\n    }\n\n    function loginPressed() {\n\n\n        axios.post(`${ADMIN_END_POINT}auth/admin-login`, {\n            id,\n            pw: password\n        })\n            .then(res => {\n\n\n                if (res.status === 200) {\n\n                    localStorage.setItem(\"i\", id)\n                    localStorage.setItem(\"p\", password)\n\n                    const token = res.headers.authorization\n\n                    if (token) {\n                        localStorage.setItem(\"token\", token)\n                        window.location.href = \"/\"\n                    } else {\n                        alert(\"잘못된 계정 정보\")\n                    }\n\n\n                }\n            })\n            .catch(err => {\n                console.error(err)\n                alert(err)\n            })\n    }\n}\n\nexport default LoginPage","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Login from './login/login'\n\n\nexport default function App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n                <Route>\n                    <Login />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n}","import React from 'react';\nimport Private from './components/private/privateRoutes'\nimport Public from './components/public/publicRoutes'\n\nfunction App() {\n\n  const token = localStorage.getItem('token')\n\n  if (token) {\n    return <Private />\n  } else {\n    return <Public />\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}