{"version":3,"sources":["components/private/main/main.tsx","components/private/post/post.tsx","components/private/privateRoutes.tsx","constants/endpoint.tsx","components/public/login/login.tsx","components/public/publicRoutes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Main","className","to","style","textDecoration","color","onClick","localStorage","removeItem","window","location","href","Post","TextField","id","label","Button","variant","cryptr","Cryptr","App","useEffect","getItem","encryptedId","encryptedPassword","decryptedId","decrypt","decryptedPassword","axios","post","pw","then","res","token","headers","authorization","setItem","autoLogin","exact","path","LoginPage","useState","setId","password","setPassword","onChange","e","value","target","fullWidth","type","status","encrytedId","encrypt","encrytedPassword","catch","err","console","error","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d71476a5.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\n\nconst Main = () => {\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <div className=\"button active\">\n                view\n            </div>\n            <Link to=\"/post\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    post\n            </div>\n            </Link>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"view__container\">\n            <div className=\"header\">\n                <span>\n                    학번\n              </span>\n                <span>\n                    날짜\n              </span>\n                <span>\n                    입실 시간\n              </span>\n                <span>\n                    퇴실 시간\n              </span>\n            </div>\n        </div>\n    </div>\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Main","import React from 'react'\nimport './styles.scss'\nimport { Link } from 'react-router-dom'\nimport { TextField, Button } from '@material-ui/core'\nconst Post = () => {\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <Link to=\"/\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    view\n            </div>\n            </Link>\n            <div className=\"button active\">\n                post\n            </div>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"post__container\">\n            <div className=\"post__form\">\n                <TextField id=\"standard-basic\" label=\"학번\" />\n                <TextField id=\"standard-basic\" label=\"날짜\" />\n                <TextField id=\"standard-basic\" label=\"입실시간\" />\n                <TextField id=\"standard-basic\" label=\"퇴실시간\" />\n                <Button variant=\"contained\" color=\"primary\">\n                    제출\n</Button>\n            </div>\n        </div>\n    </div>\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Post","import React, { useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Main from './main/main'\nimport axios from 'axios'\nimport { END_POINT } from '../../constants/endpoint';\nimport Post from './post/post'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\n\nexport default function App() {\n\n    useEffect(() => {\n        autoLogin()\n    }, [])\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Main />\n                </Route>\n                <Route path=\"/post\" >\n                    <Post />\n                </Route>\n                <Route>\n                    <Main />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n\n    function autoLogin() {\n\n        if (localStorage.getItem(\"i\") && localStorage.getItem(\"p\")) {\n            const encryptedId = localStorage.getItem(\"i\") as string\n            const encryptedPassword = localStorage.getItem(\"p\") as string\n            const decryptedId = cryptr.decrypt(encryptedId)\n            const decryptedPassword = cryptr.decrypt(encryptedPassword)\n\n            axios.post(`${END_POINT}auth/login`, {\n                id: decryptedId,\n                pw: decryptedPassword\n            })\n                .then(res => {\n                    const token = res.headers.authorization\n                    localStorage.setItem(\"token\", token)\n                })\n        }\n\n    }\n}","export const END_POINT = \"http://13.125.144.97:9766/\"","import React, { useState } from 'react'\nimport './styles.scss'\nimport { TextField, Button } from '@material-ui/core'\nimport axios from 'axios'\nimport { END_POINT } from '../../../constants/endpoint'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\nconst LoginPage = () => {\n\n    const [id, setId] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    return <div className=\"public__login__container\">\n        <div className=\"height__200\"></div>\n        <div className=\"login_form_container\">\n            <TextField onChange={idHandler} fullWidth value={id} label=\"아이디\" />\n            <TextField onChange={passwordHandler} fullWidth value={password} type=\"password\" label=\"패스워드\" />\n            <Button onClick={loginPressed} className=\"button\" variant=\"contained\" color=\"primary\">\n                로그인\n            </Button>\n        </div>\n    </div>\n\n    function idHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setId(value)\n    }\n\n    function passwordHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setPassword(value)\n    }\n\n    function loginPressed() {\n\n        axios.post(`${END_POINT}auth/login`, {\n            id,\n            pw: password\n        })\n            .then(res => {\n                if (res.status === 200) {\n\n                    const encrytedId = cryptr.encrypt(id)\n                    const encrytedPassword = cryptr.encrypt(password)\n\n                    localStorage.setItem(\"i\", encrytedId)\n                    localStorage.setItem(\"p\", encrytedPassword)\n\n\n                    const token = res.headers.authorization\n                    localStorage.setItem(\"token\", token)\n                    window.location.href = \"/\"\n                }\n            })\n            .catch(err => {\n                console.error(err)\n            })\n    }\n}\n\nexport default LoginPage","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Login from './login/login'\n\n\nexport default function App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n                <Route>\n                    <Login />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n}","import React from 'react';\nimport Private from './components/private/privateRoutes'\nimport Public from './components/public/publicRoutes'\n\nfunction App() {\n\n  const token = localStorage.getItem('token')\n\n  if (token) {\n    return <Private />\n  } else {\n    return <Public />\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}