{"version":3,"sources":["components/global/dialog.tsx","components/private/table.tsx","components/private/main/exitTimeInput.tsx","components/private/main/excelDown.tsx","components/private/main/main.tsx","constants/endpoint.tsx","components/private/post/post.tsx","components/private/privateRoutes.tsx","components/public/login/login.tsx","components/public/publicRoutes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AlertDialog","title","message","callback","React","useState","open","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","autoFocus","useStyles","makeStyles","table","minWidth","SimpleTable","infos","noLabelTapped","turnOnExitTimeInput","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","info","i","key","scope","no","user_name","user_univ_id","user_major","access_time","Date","getHours","getMinutes","ip_addr","ExitTimeInput","exitTimeString","handleExitTimeString","turnOfExitTimeInput","wrapperRef","useRef","ref","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideAlerter","onChange","value","type","ExcelDown","datas","turnOffExcelDownView","data","filename","fields","style","padding","Main","setInfos","searchedInfos","setSearchedInfos","searching","setSearching","dialogTitle","setDialogTitle","dialogMessage","setDialogMessage","dialog","setDialog","noDesc","setNoDesc","exitTimeInput","setExitTimeInput","setExitTimeString","excelDownView","setExcelDownView","setInterval","axios","get","headers","Authorization","localStorage","getItem","then","res","status","sort","compareNumber2","catch","err","console","error","to","textDecoration","logoutPressed","TextField","label","variant","filter","includes","admin_id","admin_department","numberLabelTapped","e","text","compareNumber","a","b","sortedInfos","removeItem","window","location","href","Post","Cryptr","App","exact","path","cryptr","LoginPage","setId","password","setPassword","fullWidth","post","pw","log","encrytedId","encrypt","encrytedPassword","setItem","token","authorization","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b28304ff.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface IProps {\n    title: string\n    message: string\n    callback: () => void\n}\n\nconst AlertDialog: React.FC<IProps> = ({\n    title,\n    message,\n    callback\n}) => {\n    const [open, setOpen] = React.useState(true);\n\n\n    // const handleClose = () => {\n    //     setOpen(false);\n    // };\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                onClose={callback}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={callback} color=\"primary\" autoFocus>\n                        네\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default AlertDialog","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Info } from '../../constants/types';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\n\ninterface IProps {\n    infos: Info[]\n    noLabelTapped: () => void\n    turnOnExitTimeInput: (text: string) => void\n}\n\nconst SimpleTable: React.FC<IProps> = ({ infos, noLabelTapped, turnOnExitTimeInput }) => {\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell onClick={noLabelTapped}>no</TableCell>\n                        <TableCell onClick={noLabelTapped} align=\"right\">이름</TableCell>\n                        <TableCell align=\"right\">학번</TableCell>\n                        <TableCell align=\"right\">전공</TableCell>\n                        <TableCell align=\"right\">입실</TableCell>\n                        <TableCell align=\"right\">퇴실</TableCell>\n                        <TableCell align=\"right\">분환산</TableCell>\n                        <TableCell align=\"right\">분환산</TableCell>\n                        <TableCell align=\"right\">ip address</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {infos.map((info, i) => (\n                        <TableRow key={i}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {info.no}\n                            </TableCell>\n                            <TableCell align=\"right\">{info.user_name}</TableCell>\n                            <TableCell align=\"right\">{info.user_univ_id}</TableCell>\n                            <TableCell align=\"right\">{info.user_major}</TableCell>\n                            <TableCell align=\"right\">{info.access_time}</TableCell>\n                            <TableCell onClick={() => {\n                                turnOnExitTimeInput(\"준비중\")\n                            }} align=\"right\">{\"준비중\"}</TableCell>\n                            <TableCell align=\"right\">{new Date(info.access_time).getHours() + \":\" + new Date(info.access_time).getMinutes()}</TableCell>\n                            <TableCell align=\"right\">{\"준비중\"}</TableCell>\n                            <TableCell align=\"right\">{info.ip_addr}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default SimpleTable","import React, { useRef, useEffect } from 'react'\n\ninterface IProps {\n    exitTimeString: string\n    handleExitTimeString: (event: React.ChangeEvent<HTMLInputElement>) => void\n    turnOfExitTimeInput: () => void\n}\n\nfunction useOutsideAlerter(ref: any, turnOfExitTimeInput: () => void) {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            turnOfExitTimeInput()\n        }\n    }\n\n    useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    });\n}\n\n\nconst ExitTimeInput: React.FC<IProps> = ({\n    exitTimeString,\n    handleExitTimeString,\n    turnOfExitTimeInput\n}) => {\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, turnOfExitTimeInput);\n\n    return <div className=\"exittimeinput_container\">\n        <div ref={wrapperRef}>\n            <input onChange={handleExitTimeString} value={exitTimeString} type=\"text\" />\n            <button >변경</button>\n        </div>\n    </div>\n}\n\nexport default ExitTimeInput","import React, { useRef, useEffect } from 'react'\nimport { Info } from '../../../constants/types'\n//@ts-ignore\nimport { JsonToExcel } from 'react-json-excel';\n\ninterface IProps {\n    datas: Info[]\n    turnOffExcelDownView: () => void\n}\n\nfunction useOutsideAlerter(ref: any, turnOffExcelDownView: () => void) {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            turnOffExcelDownView()\n        }\n    }\n\n    useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    });\n}\n\n\nconst ExcelDown: React.FC<IProps> = ({\n    datas,\n    turnOffExcelDownView\n}) => {\n\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, turnOffExcelDownView);\n\n    const className = 'class-name-for-style',\n        filename = 'Excel-file',\n        fields = {\n            \"no\": \"No\",\n            \"user_name\": \"이름\",\n            \"user_univ_id\": \"학번\",\n            \"user_major\": \"전공\",\n            \"access_time\": \"접근시간\",\n            \"admin_id\": \"관리자\",\n            \"admin_department\": \"관리자 부서\",\n            \"ip_addr\": \"아이피\",\n            \"access_type\": \"접근 유형\"\n        },\n        style = {\n            padding: \"5px\"\n        }\n\n    return <div className=\"excel_down_container\">\n        <div ref={wrapperRef} className=\"card\">\n            <JsonToExcel\n                data={datas}\n                className={className}\n                filename={filename}\n                fields={fields}\n                style={style}\n            />\n        </div>\n\n    </div>\n}\n\nexport default ExcelDown","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport './styles.scss'\nimport { Info } from '../../../constants/types'\nimport axios from 'axios'\nimport { ADMIN_END_POINT } from '../../../constants/endpoint'\nimport { TextField } from '@material-ui/core'\nimport AlertDialog from '../../global/dialog'\nimport SimpleTable from '../table'\nimport ExitTimeInput from './exitTimeInput'\nimport ExcelDown from './excelDown'\n\nconst Main = () => {\n\n    const [infos, setInfos] = useState<Info[]>([])\n    const [searchedInfos, setSearchedInfos] = useState<Info[]>([])\n    const [searching, setSearching] = useState(false)\n    const [dialogTitle, setDialogTitle] = useState(\"\")\n    const [dialogMessage, setDialogMessage] = useState(\"\")\n    const [dialog, setDialog] = useState(false)\n    const [noDesc, setNoDesc] = useState(true)\n    const [exitTimeInput, setExitTimeInput] = useState(false)\n    const [exitTimeString, setExitTimeString] = useState(\"\")\n    const [excelDownView, setExcelDownView] = useState(false)\n\n\n\n    useEffect(() => {\n        setInterval(function () { fetchInfos() }, 333000);\n\n    }, [])\n\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <div className=\"button active\">\n                view\n            </div>\n            <Link to=\"/post\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    post\n            </div>\n            </Link>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"search_bar__container\">\n            <TextField id=\"outlined-basic\" label=\"Search\" variant=\"outlined\" onChange={textFieldHandler} />\n        </div>\n        <div className=\"view__container\">\n\n            {searching ? <SimpleTable turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={searchedInfos} /> : <SimpleTable turnOnExitTimeInput={turnOnExitTimeInput} noLabelTapped={numberLabelTapped} infos={infos} />}\n\n\n            {dialog && <AlertDialog title={dialogTitle} message={dialogMessage} callback={closeAlertAndLogout} />}\n        </div>\n\n        <button onClick={excelDownButtonTapped} className=\"excel_down_button\">\n            엑셀다운\n        </button>\n        {(excelDownView && searching) && <ExcelDown turnOffExcelDownView={turnOffExcelDownView} datas={searchedInfos} />}\n        {(excelDownView && !searching) && <ExcelDown turnOffExcelDownView={turnOffExcelDownView} datas={infos} />}\n\n        {exitTimeInput && <ExitTimeInput\n            turnOfExitTimeInput={turnOfExitTimeInput}\n            handleExitTimeString={handleExitTimeString} exitTimeString={exitTimeString} />}\n    </div>\n\n    function turnOffExcelDownView() {\n        setExcelDownView(false)\n    }\n\n    function excelDownButtonTapped() {\n        setExcelDownView(true)\n    }\n\n    function turnOfExitTimeInput() {\n        setExitTimeInput(false)\n    }\n\n    function handleExitTimeString(e: React.ChangeEvent<HTMLInputElement>) {\n        setExitTimeString(e.target.value)\n    }\n\n    function turnOnExitTimeInput(text: string) {\n        setExitTimeInput(true)\n        setExitTimeString(text)\n    }\n\n    function compareNumber(a: Info, b: Info) {\n        if (a.no < b.no) {\n            return -1;\n        }\n        if (a.no > b.no) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function compareNumber2(a: Info, b: Info) {\n        if (a.no < b.no) {\n            return 1;\n        }\n        if (a.no > b.no) {\n            return -1;\n        }\n        return 0;\n    }\n\n    function numberLabelTapped() {\n        const sortedInfos = noDesc ? infos.sort(compareNumber2) : infos.sort(compareNumber)\n        setNoDesc(!noDesc)\n        setSearchedInfos(sortedInfos)\n    }\n\n    function closeAlertAndLogout() {\n        setDialog(false)\n        logoutPressed()\n    }\n\n    function textFieldHandler(event: React.ChangeEvent<HTMLInputElement>) {\n        const value = event.target.value\n        if (value === \"\") {\n            setSearchedInfos([])\n            setSearching(false)\n            return\n        }\n\n        const searchedInfos = infos.filter((info) => {\n            if (info.user_name.includes(value) || info.user_major.includes(value) ||\n                info.admin_id.includes(value) || info.admin_department.includes(value) ||\n                info.user_univ_id.includes(value) || info.ip_addr.includes(value)\n            ) {\n                return true\n            } else {\n                return false\n            }\n        })\n\n        setSearchedInfos(searchedInfos)\n        setSearching(true)\n    }\n\n    function fetchInfos() {\n\n        axios.get(`${ADMIN_END_POINT}v1/msc/testfetch`, {\n            headers: {\n                Authorization: localStorage.getItem(\"token\")\n            }\n        })\n            .then(res => {\n\n                if (res.status === 200) {\n                    const infos = res.data.data as Info[]\n                    infos.sort(compareNumber2)\n                    setInfos(infos)\n                } else {\n                    setDialogTitle(\"성서봇입니다\")\n                    setDialogMessage(\"현재 다른 기기에서 접속한 유저가 있습니다...\")\n                    setDialog(true)\n                }\n            })\n            .catch(err => {\n                console.error(err)\n                setDialogTitle(\"성서봇입니다\")\n                setDialogMessage(\"현재 다른 기기에서 접속한 유저가 있습니다...\")\n                setDialog(true)\n            })\n    }\n\n\n\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Main","export const END_POINT = \"http://13.125.144.97:9766/\"\nexport const ADMIN_END_POINT = \"http://13.125.144.97:1487/\"","import React from 'react'\nimport './styles.scss'\nimport { Link } from 'react-router-dom'\nimport { TextField, Button } from '@material-ui/core'\nconst Post = () => {\n    return <div className=\"private__main__container\">\n        <div className=\"navigation__bar\">\n            <Link to=\"/\" style={{\n                textDecoration: \"none\",\n                color: \"black\"\n            }}>\n                <div className=\"button\">\n                    view\n            </div>\n            </Link>\n            <div className=\"button active\">\n                post\n            </div>\n            <button onClick={logoutPressed}>로그아웃</button>\n        </div>\n        <div className=\"post__container\">\n            <div className=\"post__form\">\n                <TextField id=\"standard-basic\" label=\"이름\" />\n                <TextField id=\"standard-basic\" label=\"학번\" />\n                <TextField id=\"standard-basic\" label=\"전공\" />\n                <TextField id=\"standard-basic\" label=\"입실시간\" />\n                <TextField id=\"standard-basic\" label=\"퇴실시간\" />\n                <Button variant=\"contained\" color=\"primary\">\n                    제출\n</Button>\n            </div>\n        </div>\n    </div>\n\n    function logoutPressed() {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"i\")\n        localStorage.removeItem(\"p\")\n\n        window.location.href = \"/\"\n    }\n}\n\nexport default Post","import React, { useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Main from './main/main'\nimport axios from 'axios'\nimport { END_POINT } from '../../constants/endpoint';\nimport Post from './post/post'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\n\nexport default function App() {\n\n    useEffect(() => {\n        // autoLogin()\n    }, [])\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Main />\n                </Route>\n                <Route path=\"/post\" >\n                    <Post />\n                </Route>\n                <Route>\n                    <Main />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n\n    function autoLogin() {\n\n        if (localStorage.getItem(\"i\") && localStorage.getItem(\"p\")) {\n            const encryptedId = localStorage.getItem(\"i\") as string\n            const encryptedPassword = localStorage.getItem(\"p\") as string\n            const decryptedId = cryptr.decrypt(encryptedId)\n            const decryptedPassword = cryptr.decrypt(encryptedPassword)\n\n            axios.post(`${END_POINT}auth/login`, {\n                id: decryptedId,\n                pw: decryptedPassword\n            })\n                .then(res => {\n                    const token = res.headers.authorization\n                    localStorage.setItem(\"token\", token)\n                })\n        }\n\n    }\n}","import React, { useState } from 'react'\nimport './styles.scss'\nimport { TextField, Button } from '@material-ui/core'\nimport axios from 'axios'\nimport { END_POINT, ADMIN_END_POINT } from '../../../constants/endpoint'\nimport Cryptr from 'cryptr'\nconst cryptr = new Cryptr('asdasd')\n\nconst LoginPage = () => {\n\n    const [id, setId] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    return <div className=\"public__login__container\">\n        <div className=\"height__200\"></div>\n        <div className=\"login_form_container\">\n            <TextField onChange={idHandler} fullWidth value={id} label=\"아이디\" />\n            <TextField onChange={passwordHandler} fullWidth value={password} type=\"password\" label=\"패스워드\" />\n            <Button onClick={loginPressed} className=\"button\" variant=\"contained\" color=\"primary\">\n                로그인\n            </Button>\n        </div>\n    </div>\n\n    function idHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setId(value)\n    }\n\n    function passwordHandler(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value\n        setPassword(value)\n    }\n\n    function loginPressed() {\n\n        axios.post(`${ADMIN_END_POINT}v1/auth/admin-login`, {\n            id,\n            pw: password\n        })\n            .then(res => {\n                if (res.status === 200) {\n\n                    console.log(res)\n\n                    const encrytedId = cryptr.encrypt(id)\n                    const encrytedPassword = cryptr.encrypt(password)\n\n                    localStorage.setItem(\"i\", encrytedId)\n                    localStorage.setItem(\"p\", encrytedPassword)\n\n                    const token = res.headers.authorization\n                    localStorage.setItem(\"token\", token)\n                    window.location.href = \"/\"\n                }\n            })\n            .catch(err => {\n                console.error(err)\n            })\n    }\n}\n\nexport default LoginPage","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Login from './login/login'\n\n\nexport default function App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n                <Route>\n                    <Login />\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n}","import React from 'react';\nimport Private from './components/private/privateRoutes'\nimport Public from './components/public/publicRoutes'\n\nfunction App() {\n\n  const token = localStorage.getItem('token')\n\n  if (token) {\n    return <Private />\n  } else {\n    return <Public />\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}